
Snake_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030cc  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008008  08008008  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008010  08008010  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a4a4  2000001c  08008034  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000a4c0  08008034  0002a4c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c66  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003172  00000000  00000000  00034cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00037e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eba  00000000  00000000  00039168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d7a  00000000  00000000  0003a022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018dec  00000000  00000000  00062d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6cc0  00000000  00000000  0007bb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e98  00000000  00000000  00172848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001776e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f24 	.word	0x08004f24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004f24 	.word	0x08004f24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b42      	ldr	r3, [pc, #264]	; (80005e4 <MX_GPIO_Init+0x120>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a41      	ldr	r2, [pc, #260]	; (80005e4 <MX_GPIO_Init+0x120>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b3f      	ldr	r3, [pc, #252]	; (80005e4 <MX_GPIO_Init+0x120>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b3c      	ldr	r3, [pc, #240]	; (80005e4 <MX_GPIO_Init+0x120>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a3b      	ldr	r2, [pc, #236]	; (80005e4 <MX_GPIO_Init+0x120>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b39      	ldr	r3, [pc, #228]	; (80005e4 <MX_GPIO_Init+0x120>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	4b36      	ldr	r3, [pc, #216]	; (80005e4 <MX_GPIO_Init+0x120>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a35      	ldr	r2, [pc, #212]	; (80005e4 <MX_GPIO_Init+0x120>)
 8000510:	f043 0302 	orr.w	r3, r3, #2
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b33      	ldr	r3, [pc, #204]	; (80005e4 <MX_GPIO_Init+0x120>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	2130      	movs	r1, #48	; 0x30
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052a:	f001 fb67 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_G_Pin|SEG_F_Pin|SEG_E_Pin|SEG_D_Pin
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f001 fb60 	bl	8001bfc <HAL_GPIO_WritePin>
                          |SEG_C_Pin|SEG_B_Pin|SEG_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f640 0104 	movw	r1, #2052	; 0x804
 8000542:	4829      	ldr	r0, [pc, #164]	; (80005e8 <MX_GPIO_Init+0x124>)
 8000544:	f001 fb5a 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054e:	4826      	ldr	r0, [pc, #152]	; (80005e8 <MX_GPIO_Init+0x124>)
 8000550:	f001 fb54 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin;
 8000554:	2330      	movs	r3, #48	; 0x30
 8000556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000558:	2311      	movs	r3, #17
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4619      	mov	r1, r3
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f001 f99b 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SEG_G_Pin|SEG_F_Pin|SEG_E_Pin|SEG_D_Pin
 8000572:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000576:	60fb      	str	r3, [r7, #12]
                          |SEG_C_Pin|SEG_B_Pin|SEG_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f001 f98b 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin|LEFT_Pin|RIGHT_Pin;
 8000592:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000598:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800059c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059e:	2301      	movs	r3, #1
 80005a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	4619      	mov	r1, r3
 80005a8:	4810      	ldr	r0, [pc, #64]	; (80005ec <MX_GPIO_Init+0x128>)
 80005aa:	f001 f97d 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 80005ae:	f641 0304 	movw	r3, #6148	; 0x1804
 80005b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	4619      	mov	r1, r3
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <MX_GPIO_Init+0x124>)
 80005c8:	f001 f96e 	bl	80018a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2104      	movs	r1, #4
 80005d0:	2017      	movs	r0, #23
 80005d2:	f001 f932 	bl	800183a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005d6:	2017      	movs	r0, #23
 80005d8:	f001 f94b 	bl	8001872 <HAL_NVIC_EnableIRQ>

}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400
 80005ec:	48000800 	.word	0x48000800

080005f0 <lcd_cmd>:
#define ST7735S_GAMCTRN1		0xe1

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

static void lcd_cmd(uint8_t cmd)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <lcd_cmd+0x44>)
 8000602:	f001 fafb 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <lcd_cmd+0x44>)
 800060e:	f001 faf5 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000612:	1df9      	adds	r1, r7, #7
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	2201      	movs	r2, #1
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <lcd_cmd+0x48>)
 800061c:	f002 fee1 	bl	80033e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000626:	4803      	ldr	r0, [pc, #12]	; (8000634 <lcd_cmd+0x44>)
 8000628:	f001 fae8 	bl	8001bfc <HAL_GPIO_WritePin>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	48000400 	.word	0x48000400
 8000638:	2000a388 	.word	0x2000a388

0800063c <lcd_data>:


static void lcd_data(uint8_t data)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000646:	2201      	movs	r2, #1
 8000648:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <lcd_data+0x44>)
 800064e:	f001 fad5 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <lcd_data+0x44>)
 800065a:	f001 facf 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800065e:	1df9      	adds	r1, r7, #7
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	2201      	movs	r2, #1
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <lcd_data+0x48>)
 8000668:	f002 febb 	bl	80033e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <lcd_data+0x44>)
 8000674:	f001 fac2 	bl	8001bfc <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	48000400 	.word	0x48000400
 8000684:	2000a388 	.word	0x2000a388

08000688 <lcd_send>:


#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000698:	2b00      	cmp	r3, #0
 800069a:	d005      	beq.n	80006a8 <lcd_send+0x20>
		lcd_cmd(value);
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ffa5 	bl	80005f0 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 80006a6:	e004      	b.n	80006b2 <lcd_send+0x2a>
		lcd_data(value);
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ffc5 	bl	800063c <lcd_data>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2104      	movs	r1, #4
 80006c6:	4817      	ldr	r0, [pc, #92]	; (8000724 <lcd_init+0x68>)
 80006c8:	f001 fa98 	bl	8001bfc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80006cc:	2064      	movs	r0, #100	; 0x64
 80006ce:	f000 ffb5 	bl	800163c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2104      	movs	r1, #4
 80006d6:	4813      	ldr	r0, [pc, #76]	; (8000724 <lcd_init+0x68>)
 80006d8:	f001 fa90 	bl	8001bfc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80006dc:	2064      	movs	r0, #100	; 0x64
 80006de:	f000 ffad 	bl	800163c <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	e009      	b.n	80006fc <lcd_init+0x40>
    lcd_send(init_table[i]);
 80006e8:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <lcd_init+0x6c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffc9 	bl	8000688 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b4b      	cmp	r3, #75	; 0x4b
 8000700:	d9f2      	bls.n	80006e8 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8000702:	20c8      	movs	r0, #200	; 0xc8
 8000704:	f000 ff9a 	bl	800163c <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 8000708:	2011      	movs	r0, #17
 800070a:	f7ff ff71 	bl	80005f0 <lcd_cmd>
  HAL_Delay(120);
 800070e:	2078      	movs	r0, #120	; 0x78
 8000710:	f000 ff94 	bl	800163c <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8000714:	2029      	movs	r0, #41	; 0x29
 8000716:	f7ff ff6b 	bl	80005f0 <lcd_cmd>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	48000400 	.word	0x48000400
 8000728:	08004f70 	.word	0x08004f70

0800072c <lcd_data16>:

static void lcd_data16(uint16_t value)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b29b      	uxth	r3, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff7c 	bl	800063c <lcd_data>
	lcd_data(value);
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff77 	bl	800063c <lcd_data>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <lcd_set_window>:

#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_set_window(int x, int y, int width, int height)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	60f8      	str	r0, [r7, #12]
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	607a      	str	r2, [r7, #4]
 8000762:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8000764:	202a      	movs	r0, #42	; 0x2a
 8000766:	f7ff ff43 	bl	80005f0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	b29b      	uxth	r3, r3
 800076e:	3301      	adds	r3, #1
 8000770:	b29b      	uxth	r3, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ffda 	bl	800072c <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	b29a      	uxth	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	b29b      	uxth	r3, r3
 8000780:	4413      	add	r3, r2
 8000782:	b29b      	uxth	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ffd1 	bl	800072c <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 800078a:	202b      	movs	r0, #43	; 0x2b
 800078c:	f7ff ff30 	bl	80005f0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	b29b      	uxth	r3, r3
 8000794:	3302      	adds	r3, #2
 8000796:	b29b      	uxth	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffc7 	bl	800072c <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	3301      	adds	r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffbc 	bl	800072c <lcd_data16>
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	4613      	mov	r3, r2
 80007c8:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	015b      	lsls	r3, r3, #5
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	4905      	ldr	r1, [pc, #20]	; (80007f0 <lcd_put_pixel+0x34>)
 80007dc:	88fa      	ldrh	r2, [r7, #6]
 80007de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000038 	.word	0x20000038

080007f4 <lcd_copy>:




void lcd_copy(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	22a0      	movs	r2, #160	; 0xa0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff ffa9 	bl	8000756 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8000804:	202c      	movs	r0, #44	; 0x2c
 8000806:	f7ff fef3 	bl	80005f0 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <lcd_copy+0x50>)
 8000812:	f001 f9f3 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081c:	4809      	ldr	r0, [pc, #36]	; (8000844 <lcd_copy+0x50>)
 800081e:	f001 f9ed 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800082a:	4907      	ldr	r1, [pc, #28]	; (8000848 <lcd_copy+0x54>)
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <lcd_copy+0x58>)
 800082e:	f002 fdd8 	bl	80033e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <lcd_copy+0x50>)
 800083a:	f001 f9df 	bl	8001bfc <HAL_GPIO_WritePin>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	48000400 	.word	0x48000400
 8000848:	20000038 	.word	0x20000038
 800084c:	2000a388 	.word	0x2000a388

08000850 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int kierunek=2;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == UP_Pin) {
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	2b20      	cmp	r3, #32
 800085e:	d103      	bne.n	8000868 <HAL_GPIO_EXTI_Callback+0x18>
	  kierunek=1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
  }else if(GPIO_Pin== LEFT_Pin)
  {
	  kierunek=4;
  }

}
 8000866:	e015      	b.n	8000894 <HAL_GPIO_EXTI_Callback+0x44>
  }else if(GPIO_Pin == RIGHT_Pin)
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800086e:	d103      	bne.n	8000878 <HAL_GPIO_EXTI_Callback+0x28>
	  kierunek=2;
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000872:	2202      	movs	r2, #2
 8000874:	601a      	str	r2, [r3, #0]
}
 8000876:	e00d      	b.n	8000894 <HAL_GPIO_EXTI_Callback+0x44>
  }else if(GPIO_Pin== DOWN_Pin)
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	2b40      	cmp	r3, #64	; 0x40
 800087c:	d103      	bne.n	8000886 <HAL_GPIO_EXTI_Callback+0x36>
	  kierunek=3;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000880:	2203      	movs	r2, #3
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	e006      	b.n	8000894 <HAL_GPIO_EXTI_Callback+0x44>
  }else if(GPIO_Pin== LEFT_Pin)
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800088c:	d102      	bne.n	8000894 <HAL_GPIO_EXTI_Callback+0x44>
	  kierunek=4;
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000890:	2204      	movs	r2, #4
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000000 	.word	0x20000000

080008a4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d101      	bne.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x14>
		seg7_update();
 80008b4:	f000 f914 	bl	8000ae0 <seg7_update>
	}
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000a3ec 	.word	0x2000a3ec

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f000 fe43 	bl	8001552 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f828 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f7ff fdf8 	bl	80004c4 <MX_GPIO_Init>
  MX_SPI2_Init();
 80008d4:	f000 fc10 	bl	80010f8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80008d8:	f000 fd86 	bl	80013e8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80008dc:	f000 fd28 	bl	8001330 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim6);
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <main+0x54>)
 80008e2:	f003 f8a9 	bl	8003a38 <HAL_TIM_Base_Start_IT>
  snkStart();
 80008e6:	f000 fa35 	bl	8000d54 <snkStart>
  lcd_init();
 80008ea:	f7ff fee7 	bl	80006bc <lcd_init>
  while (1)
  {
	  HAL_Delay(130);
 80008ee:	2082      	movs	r0, #130	; 0x82
 80008f0:	f000 fea4 	bl	800163c <HAL_Delay>
	  snk_eat();
 80008f4:	f000 fb7a 	bl	8000fec <snk_eat>
	  snk_move(kierunek);
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <main+0x58>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fa79 	bl	8000df4 <snk_move>
	  game_over();
 8000902:	f000 fba9 	bl	8001058 <game_over>
	  snk_draw();
 8000906:	f000 f9ff 	bl	8000d08 <snk_draw>
	  seg7_show(getScore());
 800090a:	f000 fbe9 	bl	80010e0 <getScore>
 800090e:	4603      	mov	r3, r0
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f8d5 	bl	8000ac0 <seg7_show>
  {
 8000916:	e7ea      	b.n	80008ee <main+0x2a>
 8000918:	2000a3ec 	.word	0x2000a3ec
 800091c:	20000000 	.word	0x20000000

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b096      	sub	sp, #88	; 0x58
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2244      	movs	r2, #68	; 0x44
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f004 fabe 	bl	8004eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000942:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000946:	f001 f997 	bl	8001c78 <HAL_PWREx_ControlVoltageScaling>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000950:	f000 f838 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000954:	2310      	movs	r3, #16
 8000956:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000958:	2301      	movs	r3, #1
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000960:	2360      	movs	r3, #96	; 0x60
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000968:	2301      	movs	r3, #1
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800096c:	2301      	movs	r3, #1
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000970:	2328      	movs	r3, #40	; 0x28
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000974:	2307      	movs	r3, #7
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000978:	2302      	movs	r3, #2
 800097a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4618      	mov	r0, r3
 8000986:	f001 f9cd 	bl	8001d24 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000990:	f000 f818 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000994:	230f      	movs	r3, #15
 8000996:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000998:	2303      	movs	r3, #3
 800099a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	2104      	movs	r1, #4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fd95 	bl	80024dc <HAL_RCC_ClockConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009b8:	f000 f804 	bl	80009c4 <Error_Handler>
  }
}
 80009bc:	bf00      	nop
 80009be:	3758      	adds	r7, #88	; 0x58
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>

080009ce <set_output>:




static void set_output(uint8_t mask)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, mask & 0x01);
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f001 f907 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, mask & 0x02);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f001 f8fc 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, mask & 0x04);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f001 f8f1 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, mask & 0x08);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f001 f8e6 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, mask & 0x10);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f001 f8db 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, mask & 0x20);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 0320 	and.w	r3, r3, #32
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f001 f8d1 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, mask & 0x40);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	2140      	movs	r1, #64	; 0x40
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f001 f8c7 	bl	8001bfc <HAL_GPIO_WritePin>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <seg7_show_digit>:
void seg7_show_digit(uint32_t value)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	const uint8_t digit[] = {
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <seg7_show_digit+0x40>)
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a88:	c303      	stmia	r3!, {r0, r1}
 8000a8a:	801a      	strh	r2, [r3, #0]
			0b0000111,
			0b1111111,
			0b1101111,
	};

	set_output(digit[value % 10]);
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <seg7_show_digit+0x44>)
 8000a90:	fba3 2301 	umull	r2, r3, r3, r1
 8000a94:	08da      	lsrs	r2, r3, #3
 8000a96:	4613      	mov	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	4413      	add	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	1aca      	subs	r2, r1, r3
 8000aa0:	f102 0318 	add.w	r3, r2, #24
 8000aa4:	443b      	add	r3, r7
 8000aa6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff8f 	bl	80009ce <set_output>
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	08004f3c 	.word	0x08004f3c
 8000abc:	cccccccd 	.word	0xcccccccd

08000ac0 <seg7_show>:
static uint32_t actual_value;
static uint32_t active_digit;


void seg7_show(uint32_t value)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	actual_value = value;
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <seg7_show+0x1c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000a038 	.word	0x2000a038

08000ae0 <seg7_update>:

void seg7_update(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f001 f886 	bl	8001bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2120      	movs	r1, #32
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f001 f880 	bl	8001bfc <HAL_GPIO_WritePin>

	switch (active_digit) {
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <seg7_update+0x74>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <seg7_update+0x2a>
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d00f      	beq.n	8000b28 <seg7_update+0x48>
		seg7_show_digit(actual_value / 10);
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
		active_digit = 0;
		break;
	}
}
 8000b08:	e021      	b.n	8000b4e <seg7_update+0x6e>
		seg7_show_digit(actual_value);
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <seg7_update+0x78>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ffb2 	bl	8000a78 <seg7_show_digit>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2110      	movs	r1, #16
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f001 f86e 	bl	8001bfc <HAL_GPIO_WritePin>
		active_digit = 1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <seg7_update+0x74>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]
		break;
 8000b26:	e012      	b.n	8000b4e <seg7_update+0x6e>
		seg7_show_digit(actual_value / 10);
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <seg7_update+0x78>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <seg7_update+0x7c>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff9f 	bl	8000a78 <seg7_show_digit>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f001 f85b 	bl	8001bfc <HAL_GPIO_WritePin>
		active_digit = 0;
 8000b46:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <seg7_update+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
		break;
 8000b4c:	bf00      	nop
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000a03c 	.word	0x2000a03c
 8000b58:	2000a038 	.word	0x2000a038
 8000b5c:	cccccccd 	.word	0xcccccccd

08000b60 <square>:

static int appleX=0;
static int appleY=0;

void square(int x_pos ,int y_pos, uint16_t color)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	80fb      	strh	r3, [r7, #6]

	for (int y = y_pos*8; y < (y_pos*8)+8; y++) {
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	e015      	b.n	8000ba2 <square+0x42>
		      for (int x = x_pos*8; x < (x_pos*8)+8; x++) {
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	e008      	b.n	8000b90 <square+0x30>
		        lcd_put_pixel(x, y,color);
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	461a      	mov	r2, r3
 8000b82:	6979      	ldr	r1, [r7, #20]
 8000b84:	6938      	ldr	r0, [r7, #16]
 8000b86:	f7ff fe19 	bl	80007bc <lcd_put_pixel>
		      for (int x = x_pos*8; x < (x_pos*8)+8; x++) {
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbf0      	blt.n	8000b7e <square+0x1e>
	for (int y = y_pos*8; y < (y_pos*8)+8; y++) {
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	dbe3      	blt.n	8000b76 <square+0x16>
		      }
		    }

}
 8000bae:	bf00      	nop
 8000bb0:	bf00      	nop
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <apple>:


void apple()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

	appleX=((HAL_GetTick()+3)%(PLACE_WIDTH-3))+1;
 8000bbe:	f000 fd31 	bl	8001624 <HAL_GetTick>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	1cd9      	adds	r1, r3, #3
 8000bc6:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <apple+0xe8>)
 8000bc8:	fba3 2301 	umull	r2, r3, r3, r1
 8000bcc:	091a      	lsrs	r2, r3, #4
 8000bce:	4613      	mov	r3, r2
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	4413      	add	r3, r2
 8000bd4:	1aca      	subs	r2, r1, r3
 8000bd6:	1c53      	adds	r3, r2, #1
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <apple+0xec>)
 8000bdc:	601a      	str	r2, [r3, #0]
	appleY=((HAL_GetTick()+3)%(PLACE_HEIGHT-3))+1;
 8000bde:	f000 fd21 	bl	8001624 <HAL_GetTick>
 8000be2:	4603      	mov	r3, r0
 8000be4:	1cd9      	adds	r1, r3, #3
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <apple+0xf0>)
 8000be8:	fba3 2301 	umull	r2, r3, r3, r1
 8000bec:	089a      	lsrs	r2, r3, #2
 8000bee:	4613      	mov	r3, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	4413      	add	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	1aca      	subs	r2, r1, r3
 8000bfa:	1c53      	adds	r3, r2, #1
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <apple+0xf4>)
 8000c00:	601a      	str	r2, [r3, #0]

	for(int i=0;i<=snk_leng;i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	e038      	b.n	8000c7a <apple+0xc2>
	{
		if(snk_pos[0][i]==appleX && snk_pos[1][i]==appleY)
 8000c08:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <apple+0xf8>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <apple+0xec>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d12d      	bne.n	8000c74 <apple+0xbc>
 8000c18:	4a25      	ldr	r2, [pc, #148]	; (8000cb0 <apple+0xf8>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3368      	adds	r3, #104	; 0x68
 8000c1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c22:	4b22      	ldr	r3, [pc, #136]	; (8000cac <apple+0xf4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d124      	bne.n	8000c74 <apple+0xbc>
		{
			appleX=((HAL_GetTick()+3)%(PLACE_WIDTH-3))+1;
 8000c2a:	f000 fcfb 	bl	8001624 <HAL_GetTick>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	1cd9      	adds	r1, r3, #3
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <apple+0xe8>)
 8000c34:	fba3 2301 	umull	r2, r3, r3, r1
 8000c38:	091a      	lsrs	r2, r3, #4
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	4413      	add	r3, r2
 8000c40:	1aca      	subs	r2, r1, r3
 8000c42:	1c53      	adds	r3, r2, #1
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <apple+0xec>)
 8000c48:	601a      	str	r2, [r3, #0]
			appleY=((HAL_GetTick()+3)%(PLACE_HEIGHT-3))+1;
 8000c4a:	f000 fceb 	bl	8001624 <HAL_GetTick>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	1cd9      	adds	r1, r3, #3
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <apple+0xf0>)
 8000c54:	fba3 2301 	umull	r2, r3, r3, r1
 8000c58:	089a      	lsrs	r2, r3, #2
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	1aca      	subs	r2, r1, r3
 8000c66:	1c53      	adds	r3, r2, #1
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <apple+0xf4>)
 8000c6c:	601a      	str	r2, [r3, #0]
			i=-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	607b      	str	r3, [r7, #4]
	for(int i=0;i<=snk_leng;i++)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3301      	adds	r3, #1
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <apple+0xfc>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	ddc1      	ble.n	8000c08 <apple+0x50>
		}
	}
	square(appleX, appleY, RED);
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <apple+0xec>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a08      	ldr	r2, [pc, #32]	; (8000cac <apple+0xf4>)
 8000c8a:	6811      	ldr	r1, [r2, #0]
 8000c8c:	22f8      	movs	r2, #248	; 0xf8
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff66 	bl	8000b60 <square>
	lcd_copy();
 8000c94:	f7ff fdae 	bl	80007f4 <lcd_copy>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	f0f0f0f1 	.word	0xf0f0f0f1
 8000ca4:	2000a380 	.word	0x2000a380
 8000ca8:	4ec4ec4f 	.word	0x4ec4ec4f
 8000cac:	2000a384 	.word	0x2000a384
 8000cb0:	2000a040 	.word	0x2000a040
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <snk_start_pos>:



void snk_start_pos()
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
	for(int le=0;le<snk_leng-1;le++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	e00f      	b.n	8000ce4 <snk_start_pos+0x2c>
	{
		snk_pos[0][le]=4-le;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f1c3 0204 	rsb	r2, r3, #4
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <snk_start_pos+0x48>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		snk_pos[1][le]=8;
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <snk_start_pos+0x48>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3368      	adds	r3, #104	; 0x68
 8000cd8:	2108      	movs	r1, #8
 8000cda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int le=0;le<snk_leng-1;le++)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <snk_start_pos+0x4c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbe9      	blt.n	8000cc4 <snk_start_pos+0xc>
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	2000a040 	.word	0x2000a040
 8000d04:	20000004 	.word	0x20000004

08000d08 <snk_draw>:
void snk_draw()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
	for (int len = 0; len<=snk_leng; len++) {
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	e010      	b.n	8000d36 <snk_draw+0x2e>
		square(snk_pos[0][len],snk_pos[1][len] ,GREEN );
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <snk_draw+0x44>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <snk_draw+0x44>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3368      	adds	r3, #104	; 0x68
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	f24e 0203 	movw	r2, #57347	; 0xe003
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f7ff ff18 	bl	8000b60 <square>
	for (int len = 0; len<=snk_leng; len++) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3301      	adds	r3, #1
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <snk_draw+0x48>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dde9      	ble.n	8000d14 <snk_draw+0xc>
	}
	lcd_copy();
 8000d40:	f7ff fd58 	bl	80007f4 <lcd_copy>

}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000a040 	.word	0x2000a040
 8000d50:	20000004 	.word	0x20000004

08000d54 <snkStart>:


void snkStart()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
	lcd_init();
 8000d5a:	f7ff fcaf 	bl	80006bc <lcd_init>

		for(int x=0;x<PLACE_WIDTH;x++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	e00c      	b.n	8000d7e <snkStart+0x2a>
		{
			square(x, 0, BLACK);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff fef9 	bl	8000b60 <square>
			square(x, 15, BLACK);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	210f      	movs	r1, #15
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff fef4 	bl	8000b60 <square>
		for(int x=0;x<PLACE_WIDTH;x++)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b13      	cmp	r3, #19
 8000d82:	ddef      	ble.n	8000d64 <snkStart+0x10>
		}
		for(int y=1;y<PLACE_HEIGHT-1;y++)
 8000d84:	2301      	movs	r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	e00c      	b.n	8000da4 <snkStart+0x50>
		{
			square(0,y,BLACK);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fee6 	bl	8000b60 <square>
			square(19,y,BLACK);
 8000d94:	2200      	movs	r2, #0
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	2013      	movs	r0, #19
 8000d9a:	f7ff fee1 	bl	8000b60 <square>
		for(int y=1;y<PLACE_HEIGHT-1;y++)
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	3301      	adds	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b0e      	cmp	r3, #14
 8000da8:	ddef      	ble.n	8000d8a <snkStart+0x36>
		}
		for(int x=1;x<PLACE_WIDTH-1;x++)
 8000daa:	2301      	movs	r3, #1
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	e011      	b.n	8000dd4 <snkStart+0x80>
		{
			for(int y=1;y<PLACE_HEIGHT-1;y++)
 8000db0:	2301      	movs	r3, #1
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	e008      	b.n	8000dc8 <snkStart+0x74>
			{
				square(x,y,WHITE);
 8000db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fecf 	bl	8000b60 <square>
			for(int y=1;y<PLACE_HEIGHT-1;y++)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	2b0e      	cmp	r3, #14
 8000dcc:	ddf3      	ble.n	8000db6 <snkStart+0x62>
		for(int x=1;x<PLACE_WIDTH-1;x++)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	ddea      	ble.n	8000db0 <snkStart+0x5c>
			}
		}

	lcd_copy();
 8000dda:	f7ff fd0b 	bl	80007f4 <lcd_copy>
	snk_start_pos();
 8000dde:	f7ff ff6b 	bl	8000cb8 <snk_start_pos>
	snk_draw();
 8000de2:	f7ff ff91 	bl	8000d08 <snk_draw>
	apple();
 8000de6:	f7ff fee7 	bl	8000bb8 <apple>

}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <snk_move>:
void snk_move(int dir)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

	switch(dir)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	f200 80eb 	bhi.w	8000fdc <snk_move+0x1e8>
 8000e06:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <snk_move+0x18>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000e8f 	.word	0x08000e8f
 8000e14:	08000efd 	.word	0x08000efd
 8000e18:	08000f6f 	.word	0x08000f6f
	{
	case 1:

		square(snk_pos[0][snk_leng-1], snk_pos[1][snk_leng-1], WHITE);
 8000e1c:	4b71      	ldr	r3, [pc, #452]	; (8000fe4 <snk_move+0x1f0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	4a71      	ldr	r2, [pc, #452]	; (8000fe8 <snk_move+0x1f4>)
 8000e24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e28:	4b6e      	ldr	r3, [pc, #440]	; (8000fe4 <snk_move+0x1f0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	4a6e      	ldr	r2, [pc, #440]	; (8000fe8 <snk_move+0x1f4>)
 8000e30:	3368      	adds	r3, #104	; 0x68
 8000e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f7ff fe90 	bl	8000b60 <square>

		for(int p=snk_leng-1;p>0;p--)
 8000e40:	4b68      	ldr	r3, [pc, #416]	; (8000fe4 <snk_move+0x1f0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	e016      	b.n	8000e78 <snk_move+0x84>
		{
			snk_pos[0][p]=snk_pos[0][p-1];
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	4a66      	ldr	r2, [pc, #408]	; (8000fe8 <snk_move+0x1f4>)
 8000e50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e54:	4964      	ldr	r1, [pc, #400]	; (8000fe8 <snk_move+0x1f4>)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			snk_pos[1][p]=snk_pos[1][p-1];
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	4a61      	ldr	r2, [pc, #388]	; (8000fe8 <snk_move+0x1f4>)
 8000e62:	3368      	adds	r3, #104	; 0x68
 8000e64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e68:	495f      	ldr	r1, [pc, #380]	; (8000fe8 <snk_move+0x1f4>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3368      	adds	r3, #104	; 0x68
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int p=snk_leng-1;p>0;p--)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	dce5      	bgt.n	8000e4a <snk_move+0x56>
		}
		snk_pos[1][0]--;
 8000e7e:	4b5a      	ldr	r3, [pc, #360]	; (8000fe8 <snk_move+0x1f4>)
 8000e80:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e84:	3b01      	subs	r3, #1
 8000e86:	4a58      	ldr	r2, [pc, #352]	; (8000fe8 <snk_move+0x1f4>)
 8000e88:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0

	break;
 8000e8c:	e0a6      	b.n	8000fdc <snk_move+0x1e8>

	case 2:

			square(snk_pos[0][snk_leng-1], snk_pos[1][snk_leng-1], WHITE);
 8000e8e:	4b55      	ldr	r3, [pc, #340]	; (8000fe4 <snk_move+0x1f0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a54      	ldr	r2, [pc, #336]	; (8000fe8 <snk_move+0x1f4>)
 8000e96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e9a:	4b52      	ldr	r3, [pc, #328]	; (8000fe4 <snk_move+0x1f0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4a51      	ldr	r2, [pc, #324]	; (8000fe8 <snk_move+0x1f4>)
 8000ea2:	3368      	adds	r3, #104	; 0x68
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eac:	4619      	mov	r1, r3
 8000eae:	f7ff fe57 	bl	8000b60 <square>

			for(int p=snk_leng-1;p>0;p--)
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <snk_move+0x1f0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	e016      	b.n	8000eea <snk_move+0xf6>
			{
				snk_pos[0][p]=snk_pos[0][p-1];
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	4a49      	ldr	r2, [pc, #292]	; (8000fe8 <snk_move+0x1f4>)
 8000ec2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec6:	4948      	ldr	r1, [pc, #288]	; (8000fe8 <snk_move+0x1f4>)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				snk_pos[1][p]=snk_pos[1][p-1];
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	4a45      	ldr	r2, [pc, #276]	; (8000fe8 <snk_move+0x1f4>)
 8000ed4:	3368      	adds	r3, #104	; 0x68
 8000ed6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eda:	4943      	ldr	r1, [pc, #268]	; (8000fe8 <snk_move+0x1f4>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	3368      	adds	r3, #104	; 0x68
 8000ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int p=snk_leng-1;p>0;p--)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	dce5      	bgt.n	8000ebc <snk_move+0xc8>
			}
				snk_pos[0][0]++;
 8000ef0:	4b3d      	ldr	r3, [pc, #244]	; (8000fe8 <snk_move+0x1f4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a3c      	ldr	r2, [pc, #240]	; (8000fe8 <snk_move+0x1f4>)
 8000ef8:	6013      	str	r3, [r2, #0]
	break;
 8000efa:	e06f      	b.n	8000fdc <snk_move+0x1e8>

	case 3:

			square(snk_pos[0][snk_leng-1], snk_pos[1][snk_leng-1], WHITE);
 8000efc:	4b39      	ldr	r3, [pc, #228]	; (8000fe4 <snk_move+0x1f0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	4a39      	ldr	r2, [pc, #228]	; (8000fe8 <snk_move+0x1f4>)
 8000f04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f08:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <snk_move+0x1f0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <snk_move+0x1f4>)
 8000f10:	3368      	adds	r3, #104	; 0x68
 8000f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f7ff fe20 	bl	8000b60 <square>

			for(int p=snk_leng-1;p>0;p--)
 8000f20:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <snk_move+0x1f0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e016      	b.n	8000f58 <snk_move+0x164>
			{
				snk_pos[0][p]=snk_pos[0][p-1];
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <snk_move+0x1f4>)
 8000f30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f34:	492c      	ldr	r1, [pc, #176]	; (8000fe8 <snk_move+0x1f4>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				snk_pos[1][p]=snk_pos[1][p-1];
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	4a29      	ldr	r2, [pc, #164]	; (8000fe8 <snk_move+0x1f4>)
 8000f42:	3368      	adds	r3, #104	; 0x68
 8000f44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f48:	4927      	ldr	r1, [pc, #156]	; (8000fe8 <snk_move+0x1f4>)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3368      	adds	r3, #104	; 0x68
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int p=snk_leng-1;p>0;p--)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	dce5      	bgt.n	8000f2a <snk_move+0x136>
			}
			snk_pos[1][0]++;
 8000f5e:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <snk_move+0x1f4>)
 8000f60:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <snk_move+0x1f4>)
 8000f68:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	break;
 8000f6c:	e036      	b.n	8000fdc <snk_move+0x1e8>

	case 4:

			square(snk_pos[0][snk_leng-1], snk_pos[1][snk_leng-1], WHITE);
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <snk_move+0x1f0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <snk_move+0x1f4>)
 8000f76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <snk_move+0x1f0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <snk_move+0x1f4>)
 8000f82:	3368      	adds	r3, #104	; 0x68
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fde7 	bl	8000b60 <square>
			for(int p=snk_leng-1;p>0;p--)
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <snk_move+0x1f0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	e016      	b.n	8000fca <snk_move+0x1d6>
			{
				snk_pos[0][p]=snk_pos[0][p-1];
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <snk_move+0x1f4>)
 8000fa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fa6:	4910      	ldr	r1, [pc, #64]	; (8000fe8 <snk_move+0x1f4>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				snk_pos[1][p]=snk_pos[1][p-1];
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <snk_move+0x1f4>)
 8000fb4:	3368      	adds	r3, #104	; 0x68
 8000fb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fba:	490b      	ldr	r1, [pc, #44]	; (8000fe8 <snk_move+0x1f4>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	3368      	adds	r3, #104	; 0x68
 8000fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int p=snk_leng-1;p>0;p--)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	dce5      	bgt.n	8000f9c <snk_move+0x1a8>
			}
			snk_pos[0][0]--;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <snk_move+0x1f4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <snk_move+0x1f4>)
 8000fd8:	6013      	str	r3, [r2, #0]
	break;
 8000fda:	bf00      	nop
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	2000a040 	.word	0x2000a040

08000fec <snk_eat>:
void snk_eat()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	if(snk_pos[0][0]==appleX && snk_pos[1][0]==appleY)
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <snk_eat+0x30>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <snk_eat+0x34>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d10d      	bne.n	8001018 <snk_eat+0x2c>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <snk_eat+0x30>)
 8000ffe:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <snk_eat+0x38>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d106      	bne.n	8001018 <snk_eat+0x2c>
	{
		snk_leng++;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <snk_eat+0x3c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	4a05      	ldr	r2, [pc, #20]	; (8001028 <snk_eat+0x3c>)
 8001012:	6013      	str	r3, [r2, #0]
		apple();
 8001014:	f7ff fdd0 	bl	8000bb8 <apple>
	}
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000a040 	.word	0x2000a040
 8001020:	2000a380 	.word	0x2000a380
 8001024:	2000a384 	.word	0x2000a384
 8001028:	20000004 	.word	0x20000004

0800102c <game_over_mess>:
void game_over_mess()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af02      	add	r7, sp, #8
	hagl_put_text(L"GAME OVER", 45, 50, YELLOW, font6x9);
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <game_over_mess+0x24>)
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800103a:	2232      	movs	r2, #50	; 0x32
 800103c:	212d      	movs	r1, #45	; 0x2d
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <game_over_mess+0x28>)
 8001040:	f003 feae 	bl	8004da0 <hagl_put_text>
	lcd_copy();
 8001044:	f7ff fbd6 	bl	80007f4 <lcd_copy>
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	08005008 	.word	0x08005008
 8001054:	08004f48 	.word	0x08004f48

08001058 <game_over>:
void game_over()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	if(snk_pos[0][0]<1 || snk_pos[0][0]>PLACE_WIDTH-2)
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <game_over+0x80>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	dd03      	ble.n	800106e <game_over+0x16>
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <game_over+0x80>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b12      	cmp	r3, #18
 800106c:	dd02      	ble.n	8001074 <game_over+0x1c>
	{
		game_over_mess();
 800106e:	f7ff ffdd 	bl	800102c <game_over_mess>
		while (1)
 8001072:	e7fe      	b.n	8001072 <game_over+0x1a>
			{
			}
	}
	if(snk_pos[1][0]<1 || snk_pos[1][0]>PLACE_HEIGHT-2)
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <game_over+0x80>)
 8001076:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800107a:	2b00      	cmp	r3, #0
 800107c:	dd04      	ble.n	8001088 <game_over+0x30>
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <game_over+0x80>)
 8001080:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001084:	2b0e      	cmp	r3, #14
 8001086:	dd02      	ble.n	800108e <game_over+0x36>
	{
		game_over_mess();
 8001088:	f7ff ffd0 	bl	800102c <game_over_mess>
		while (1)
 800108c:	e7fe      	b.n	800108c <game_over+0x34>
			{
			}
	}

	for  (int a=1;a<snk_leng;a++) {
 800108e:	2301      	movs	r3, #1
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	e017      	b.n	80010c4 <game_over+0x6c>
		if(snk_pos[0][a]==snk_pos[0][0] && snk_pos[1][a]==snk_pos[1][0])
 8001094:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <game_over+0x80>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <game_over+0x80>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d10c      	bne.n	80010be <game_over+0x66>
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <game_over+0x80>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3368      	adds	r3, #104	; 0x68
 80010aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <game_over+0x80>)
 80010b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d102      	bne.n	80010be <game_over+0x66>
		{
			game_over_mess();
 80010b8:	f7ff ffb8 	bl	800102c <game_over_mess>
			while (1)
 80010bc:	e7fe      	b.n	80010bc <game_over+0x64>
	for  (int a=1;a<snk_leng;a++) {
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3301      	adds	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <game_over+0x84>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dbe2      	blt.n	8001094 <game_over+0x3c>
				{
				}
		}
	}

}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000a040 	.word	0x2000a040
 80010dc:	20000004 	.word	0x20000004

080010e0 <getScore>:
int getScore()
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	return snk_leng-4;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <getScore+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3b04      	subs	r3, #4
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	20000004 	.word	0x20000004

080010f8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_SPI2_Init+0x74>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <MX_SPI2_Init+0x78>)
 8001100:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_SPI2_Init+0x74>)
 8001104:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001108:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_SPI2_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <MX_SPI2_Init+0x74>)
 8001112:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001116:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_SPI2_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_SPI2_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_SPI2_Init+0x74>)
 8001126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_SPI2_Init+0x74>)
 800112e:	2210      	movs	r2, #16
 8001130:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_SPI2_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_SPI2_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_SPI2_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_SPI2_Init+0x74>)
 8001146:	2207      	movs	r2, #7
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_SPI2_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_SPI2_Init+0x74>)
 8001152:	2208      	movs	r2, #8
 8001154:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_SPI2_Init+0x74>)
 8001158:	f002 f8a0 	bl	800329c <HAL_SPI_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001162:	f7ff fc2f 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000a388 	.word	0x2000a388
 8001170:	40003800 	.word	0x40003800

08001174 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a25      	ldr	r2, [pc, #148]	; (8001228 <HAL_SPI_MspInit+0xb4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d144      	bne.n	8001220 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_SPI_MspInit+0xb8>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	4a24      	ldr	r2, [pc, #144]	; (800122c <HAL_SPI_MspInit+0xb8>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	6593      	str	r3, [r2, #88]	; 0x58
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <HAL_SPI_MspInit+0xb8>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_SPI_MspInit+0xb8>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <HAL_SPI_MspInit+0xb8>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_SPI_MspInit+0xb8>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_SPI_MspInit+0xb8>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a18      	ldr	r2, [pc, #96]	; (800122c <HAL_SPI_MspInit+0xb8>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_SPI_MspInit+0xb8>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011de:	2308      	movs	r3, #8
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ee:	2305      	movs	r3, #5
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <HAL_SPI_MspInit+0xbc>)
 80011fa:	f000 fb55 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001210:	2305      	movs	r3, #5
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <HAL_SPI_MspInit+0xc0>)
 800121c:	f000 fb44 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40003800 	.word	0x40003800
 800122c:	40021000 	.word	0x40021000
 8001230:	48000800 	.word	0x48000800
 8001234:	48000400 	.word	0x48000400

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_MspInit+0x44>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_MspInit+0x44>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6613      	str	r3, [r2, #96]	; 0x60
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_MspInit+0x44>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_MspInit+0x44>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_MspInit+0x44>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6593      	str	r3, [r2, #88]	; 0x58
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_MspInit+0x44>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <NMI_Handler+0x4>

08001286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler+0x4>

08001292 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <UsageFault_Handler+0x4>

0800129e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012cc:	f000 f996 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_Pin);
 80012d8:	2020      	movs	r0, #32
 80012da:	f000 fca7 	bl	8001c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_Pin);
 80012de:	2040      	movs	r0, #64	; 0x40
 80012e0:	f000 fca4 	bl	8001c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 80012e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012e8:	f000 fca0 	bl	8001c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 80012ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012f0:	f000 fc9c 	bl	8001c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <TIM6_DAC_IRQHandler+0x10>)
 80012fe:	f002 fc0b 	bl	8003b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000a3ec 	.word	0x2000a3ec

0800130c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_TIM6_Init+0x64>)
 8001342:	4a15      	ldr	r2, [pc, #84]	; (8001398 <MX_TIM6_Init+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_TIM6_Init+0x64>)
 8001348:	2263      	movs	r2, #99	; 0x63
 800134a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_TIM6_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_TIM6_Init+0x64>)
 8001354:	2263      	movs	r2, #99	; 0x63
 8001356:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_TIM6_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_TIM6_Init+0x64>)
 8001360:	f002 fb12 	bl	8003988 <HAL_TIM_Base_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800136a:	f7ff fb2b 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4619      	mov	r1, r3
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <MX_TIM6_Init+0x64>)
 800137c:	f002 fdae 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001386:	f7ff fb1d 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000a3ec 	.word	0x2000a3ec
 8001398:	40001000 	.word	0x40001000

0800139c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <HAL_TIM_Base_MspInit+0x44>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d113      	bne.n	80013d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_TIM_Base_MspInit+0x48>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <HAL_TIM_Base_MspInit+0x48>)
 80013b4:	f043 0310 	orr.w	r3, r3, #16
 80013b8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_TIM_Base_MspInit+0x48>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	210a      	movs	r1, #10
 80013ca:	2036      	movs	r0, #54	; 0x36
 80013cc:	f000 fa35 	bl	800183a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013d0:	2036      	movs	r0, #54	; 0x36
 80013d2:	f000 fa4e 	bl	8001872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40001000 	.word	0x40001000
 80013e4:	40021000 	.word	0x40021000

080013e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_USART2_UART_Init+0x58>)
 80013ee:	4a15      	ldr	r2, [pc, #84]	; (8001444 <MX_USART2_UART_Init+0x5c>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_USART2_UART_Init+0x58>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART2_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_USART2_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART2_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART2_UART_Init+0x58>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART2_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART2_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART2_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART2_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART2_UART_Init+0x58>)
 800142c:	f002 fdfc 	bl	8004028 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001436:	f7ff fac5 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000a438 	.word	0x2000a438
 8001444:	40004400 	.word	0x40004400

08001448 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0ac      	sub	sp, #176	; 0xb0
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2288      	movs	r2, #136	; 0x88
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fd21 	bl	8004eb0 <memset>
  if(uartHandle->Instance==USART2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <HAL_UART_MspInit+0xb0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d13b      	bne.n	80014f0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001478:	2302      	movs	r3, #2
 800147a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4618      	mov	r0, r3
 8001486:	f001 fa4d 	bl	8002924 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001490:	f7ff fa98 	bl	80009c4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_UART_MspInit+0xb4>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	4a18      	ldr	r2, [pc, #96]	; (80014fc <HAL_UART_MspInit+0xb4>)
 800149a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149e:	6593      	str	r3, [r2, #88]	; 0x58
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_UART_MspInit+0xb4>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_UART_MspInit+0xb4>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <HAL_UART_MspInit+0xb4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_UART_MspInit+0xb4>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c4:	230c      	movs	r3, #12
 80014c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014dc:	2307      	movs	r3, #7
 80014de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ec:	f000 f9dc 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014f0:	bf00      	nop
 80014f2:	37b0      	adds	r7, #176	; 0xb0
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40004400 	.word	0x40004400
 80014fc:	40021000 	.word	0x40021000

08001500 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001504:	f7ff ff02 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <LoopForever+0x6>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	; (8001540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <LoopForever+0xe>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	; (800154c <LoopForever+0x16>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f003 fcc7 	bl	8004ec0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001532:	f7ff f9c7 	bl	80008c4 <main>

08001536 <LoopForever>:

LoopForever:
    b LoopForever
 8001536:	e7fe      	b.n	8001536 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001538:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001544:	08008018 	.word	0x08008018
  ldr r2, =_sbss
 8001548:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800154c:	2000a4c0 	.word	0x2000a4c0

08001550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC1_2_IRQHandler>

08001552 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155c:	2003      	movs	r0, #3
 800155e:	f000 f961 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001562:	200f      	movs	r0, #15
 8001564:	f000 f80e 	bl	8001584 <HAL_InitTick>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	e001      	b.n	8001578 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001574:	f7ff fe60 	bl	8001238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001578:	79fb      	ldrb	r3, [r7, #7]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_InitTick+0x6c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d023      	beq.n	80015e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_InitTick+0x70>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_InitTick+0x6c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f96d 	bl	800188e <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10f      	bne.n	80015da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d809      	bhi.n	80015d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 f937 	bl	800183a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_InitTick+0x74>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e007      	b.n	80015e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e004      	b.n	80015e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e001      	b.n	80015e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000010 	.word	0x20000010
 80015f4:	20000008 	.word	0x20000008
 80015f8:	2000000c 	.word	0x2000000c

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000010 	.word	0x20000010
 8001620:	2000a4bc 	.word	0x2000a4bc

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000a4bc 	.word	0x2000a4bc

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffde 	bl	8001624 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000010 	.word	0x20000010

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f0:	d301      	bcc.n	80017f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00f      	b.n	8001816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <SysTick_Config+0x40>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fe:	210f      	movs	r1, #15
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f7ff ff8e 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <SysTick_Config+0x40>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <SysTick_Config+0x40>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010

08001824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff29 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800184c:	f7ff ff3e 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001850:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	6978      	ldr	r0, [r7, #20]
 8001858:	f7ff ff8e 	bl	8001778 <NVIC_EncodePriority>
 800185c:	4602      	mov	r2, r0
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff5d 	bl	8001724 <__NVIC_SetPriority>
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff31 	bl	80016e8 <__NVIC_EnableIRQ>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffa2 	bl	80017e0 <SysTick_Config>
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b6:	e17f      	b.n	8001bb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2101      	movs	r1, #1
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8171 	beq.w	8001bb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d005      	beq.n	80018e8 <HAL_GPIO_Init+0x40>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d130      	bne.n	800194a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800191e:	2201      	movs	r2, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	f003 0201 	and.w	r2, r3, #1
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b03      	cmp	r3, #3
 8001954:	d118      	bne.n	8001988 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800195c:	2201      	movs	r2, #1
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	08db      	lsrs	r3, r3, #3
 8001972:	f003 0201 	and.w	r2, r3, #1
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b03      	cmp	r3, #3
 8001992:	d017      	beq.n	80019c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d123      	bne.n	8001a18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	08da      	lsrs	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	6939      	ldr	r1, [r7, #16]
 8001a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80ac 	beq.w	8001bb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <HAL_GPIO_Init+0x330>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	4a5e      	ldr	r2, [pc, #376]	; (8001bd8 <HAL_GPIO_Init+0x330>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6613      	str	r3, [r2, #96]	; 0x60
 8001a66:	4b5c      	ldr	r3, [pc, #368]	; (8001bd8 <HAL_GPIO_Init+0x330>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a72:	4a5a      	ldr	r2, [pc, #360]	; (8001bdc <HAL_GPIO_Init+0x334>)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a9c:	d025      	beq.n	8001aea <HAL_GPIO_Init+0x242>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4f      	ldr	r2, [pc, #316]	; (8001be0 <HAL_GPIO_Init+0x338>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d01f      	beq.n	8001ae6 <HAL_GPIO_Init+0x23e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4e      	ldr	r2, [pc, #312]	; (8001be4 <HAL_GPIO_Init+0x33c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d019      	beq.n	8001ae2 <HAL_GPIO_Init+0x23a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4d      	ldr	r2, [pc, #308]	; (8001be8 <HAL_GPIO_Init+0x340>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0x236>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4c      	ldr	r2, [pc, #304]	; (8001bec <HAL_GPIO_Init+0x344>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_GPIO_Init+0x232>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4b      	ldr	r2, [pc, #300]	; (8001bf0 <HAL_GPIO_Init+0x348>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x22e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4a      	ldr	r2, [pc, #296]	; (8001bf4 <HAL_GPIO_Init+0x34c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_GPIO_Init+0x22a>
 8001ace:	2306      	movs	r3, #6
 8001ad0:	e00c      	b.n	8001aec <HAL_GPIO_Init+0x244>
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	e00a      	b.n	8001aec <HAL_GPIO_Init+0x244>
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	e008      	b.n	8001aec <HAL_GPIO_Init+0x244>
 8001ada:	2304      	movs	r3, #4
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x244>
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x244>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x244>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x244>
 8001aea:	2300      	movs	r3, #0
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001afc:	4937      	ldr	r1, [pc, #220]	; (8001bdc <HAL_GPIO_Init+0x334>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_GPIO_Init+0x350>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b2e:	4a32      	ldr	r2, [pc, #200]	; (8001bf8 <HAL_GPIO_Init+0x350>)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_GPIO_Init+0x350>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b58:	4a27      	ldr	r2, [pc, #156]	; (8001bf8 <HAL_GPIO_Init+0x350>)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_GPIO_Init+0x350>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <HAL_GPIO_Init+0x350>)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_GPIO_Init+0x350>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bac:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <HAL_GPIO_Init+0x350>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f47f ae78 	bne.w	80018b8 <HAL_GPIO_Init+0x10>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	371c      	adds	r7, #28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	48000400 	.word	0x48000400
 8001be4:	48000800 	.word	0x48000800
 8001be8:	48000c00 	.word	0x48000c00
 8001bec:	48001000 	.word	0x48001000
 8001bf0:	48001400 	.word	0x48001400
 8001bf4:	48001800 	.word	0x48001800
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c0c:	787b      	ldrb	r3, [r7, #1]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c18:	e002      	b.n	8001c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fe00 	bl	8000850 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40007000 	.word	0x40007000

08001c78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c86:	d130      	bne.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c94:	d038      	beq.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2232      	movs	r2, #50	; 0x32
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0c9b      	lsrs	r3, r3, #18
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cbc:	e002      	b.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d102      	bne.n	8001cd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f2      	bne.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce4:	d110      	bne.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e00f      	b.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf6:	d007      	beq.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d00:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e3ca      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d36:	4b97      	ldr	r3, [pc, #604]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d40:	4b94      	ldr	r3, [pc, #592]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80e4 	beq.w	8001f20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_RCC_OscConfig+0x4a>
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	f040 808b 	bne.w	8001e7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	f040 8087 	bne.w	8001e7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d6e:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x62>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e3a2      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1a      	ldr	r2, [r3, #32]
 8001d8a:	4b82      	ldr	r3, [pc, #520]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_RCC_OscConfig+0x7c>
 8001d96:	4b7f      	ldr	r3, [pc, #508]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d9e:	e005      	b.n	8001dac <HAL_RCC_OscConfig+0x88>
 8001da0:	4b7c      	ldr	r3, [pc, #496]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d223      	bcs.n	8001df8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fd55 	bl	8002864 <RCC_SetFlashLatencyFromMSIRange>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e383      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc4:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a72      	ldr	r2, [pc, #456]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b70      	ldr	r3, [pc, #448]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	496d      	ldr	r1, [pc, #436]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de2:	4b6c      	ldr	r3, [pc, #432]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	4968      	ldr	r1, [pc, #416]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
 8001df6:	e025      	b.n	8001e44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df8:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a65      	ldr	r2, [pc, #404]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4960      	ldr	r1, [pc, #384]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e16:	4b5f      	ldr	r3, [pc, #380]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	495b      	ldr	r1, [pc, #364]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fd15 	bl	8002864 <RCC_SetFlashLatencyFromMSIRange>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e343      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e44:	f000 fc4a 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b52      	ldr	r3, [pc, #328]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	4950      	ldr	r1, [pc, #320]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	4a4e      	ldr	r2, [pc, #312]	; (8001f9c <HAL_RCC_OscConfig+0x278>)
 8001e62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e64:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fb8b 	bl	8001584 <HAL_InitTick>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d052      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	e327      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d032      	beq.n	8001eea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e84:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a42      	ldr	r2, [pc, #264]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fbc8 	bl	8001624 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e98:	f7ff fbc4 	bl	8001624 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e310      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a36      	ldr	r2, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4931      	ldr	r1, [pc, #196]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	492c      	ldr	r1, [pc, #176]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
 8001ee8:	e01a      	b.n	8001f20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eea:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a29      	ldr	r2, [pc, #164]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff fb95 	bl	8001624 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001efe:	f7ff fb91 	bl	8001624 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e2dd      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f10:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f0      	bne.n	8001efe <HAL_RCC_OscConfig+0x1da>
 8001f1c:	e000      	b.n	8001f20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d074      	beq.n	8002016 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x21a>
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b0c      	cmp	r3, #12
 8001f36:	d10e      	bne.n	8001f56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d10b      	bne.n	8001f56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d064      	beq.n	8002014 <HAL_RCC_OscConfig+0x2f0>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d160      	bne.n	8002014 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e2ba      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x24a>
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e026      	b.n	8001fbc <HAL_RCC_OscConfig+0x298>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f76:	d115      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x280>
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a02      	ldr	r2, [pc, #8]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e014      	b.n	8001fbc <HAL_RCC_OscConfig+0x298>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	08007fc0 	.word	0x08007fc0
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	2000000c 	.word	0x2000000c
 8001fa4:	4ba0      	ldr	r3, [pc, #640]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a9f      	ldr	r2, [pc, #636]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b9d      	ldr	r3, [pc, #628]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a9c      	ldr	r2, [pc, #624]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fb2e 	bl	8001624 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fb2a 	bl	8001624 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e276      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fde:	4b92      	ldr	r3, [pc, #584]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2a8>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff fb1a 	bl	8001624 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fb16 	bl	8001624 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e262      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002006:	4b88      	ldr	r3, [pc, #544]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2d0>
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d060      	beq.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d005      	beq.n	8002034 <HAL_RCC_OscConfig+0x310>
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d119      	bne.n	8002062 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d116      	bne.n	8002062 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002034:	4b7c      	ldr	r3, [pc, #496]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_OscConfig+0x328>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e23f      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b76      	ldr	r3, [pc, #472]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	4973      	ldr	r1, [pc, #460]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002060:	e040      	b.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d023      	beq.n	80020b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206a:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a6e      	ldr	r2, [pc, #440]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff fad5 	bl	8001624 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff fad1 	bl	8001624 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e21d      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002090:	4b65      	ldr	r3, [pc, #404]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b62      	ldr	r3, [pc, #392]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	061b      	lsls	r3, r3, #24
 80020aa:	495f      	ldr	r1, [pc, #380]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e018      	b.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5c      	ldr	r2, [pc, #368]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff fab1 	bl	8001624 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c6:	f7ff faad 	bl	8001624 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e1f9      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d8:	4b53      	ldr	r3, [pc, #332]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03c      	beq.n	800216a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01c      	beq.n	8002132 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fe:	4a4a      	ldr	r2, [pc, #296]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff fa8c 	bl	8001624 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff fa88 	bl	8001624 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1d4      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002122:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ef      	beq.n	8002110 <HAL_RCC_OscConfig+0x3ec>
 8002130:	e01b      	b.n	800216a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002138:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7ff fa6f 	bl	8001624 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214a:	f7ff fa6b 	bl	8001624 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1b7      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800215e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ef      	bne.n	800214a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80a6 	beq.w	80022c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10d      	bne.n	80021a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	4a26      	ldr	r2, [pc, #152]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	6593      	str	r3, [r2, #88]	; 0x58
 8002194:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d118      	bne.n	80021e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021b0:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021bc:	f7ff fa32 	bl	8001624 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c4:	f7ff fa2e 	bl	8001624 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e17a      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d108      	bne.n	80021fc <HAL_RCC_OscConfig+0x4d8>
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021fa:	e029      	b.n	8002250 <HAL_RCC_OscConfig+0x52c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d115      	bne.n	8002230 <HAL_RCC_OscConfig+0x50c>
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	4a03      	ldr	r2, [pc, #12]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002224:	e014      	b.n	8002250 <HAL_RCC_OscConfig+0x52c>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40007000 	.word	0x40007000
 8002230:	4b9c      	ldr	r3, [pc, #624]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	4a9b      	ldr	r2, [pc, #620]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002240:	4b98      	ldr	r3, [pc, #608]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	4a97      	ldr	r2, [pc, #604]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d016      	beq.n	8002286 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff f9e4 	bl	8001624 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff f9e0 	bl	8001624 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e12a      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002276:	4b8b      	ldr	r3, [pc, #556]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ed      	beq.n	8002260 <HAL_RCC_OscConfig+0x53c>
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7ff f9cd 	bl	8001624 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7ff f9c9 	bl	8001624 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	; 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e113      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a4:	4b7f      	ldr	r3, [pc, #508]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ed      	bne.n	800228e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b2:	7ffb      	ldrb	r3, [r7, #31]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b8:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	4a79      	ldr	r2, [pc, #484]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80022be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80fe 	beq.w	80024ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	f040 80d0 	bne.w	8002478 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022d8:	4b72      	ldr	r3, [pc, #456]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0203 	and.w	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d130      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	3b01      	subs	r3, #1
 80022f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d127      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d11f      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002318:	2a07      	cmp	r2, #7
 800231a:	bf14      	ite	ne
 800231c:	2201      	movne	r2, #1
 800231e:	2200      	moveq	r2, #0
 8002320:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002322:	4293      	cmp	r3, r2
 8002324:	d113      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d109      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	3b01      	subs	r3, #1
 8002348:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d06e      	beq.n	800242c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d069      	beq.n	8002428 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0ad      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002370:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a4b      	ldr	r2, [pc, #300]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800237c:	f7ff f952 	bl	8001624 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f94e 	bl	8001624 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e09a      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002396:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a2:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <HAL_RCC_OscConfig+0x784>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023b2:	3a01      	subs	r2, #1
 80023b4:	0112      	lsls	r2, r2, #4
 80023b6:	4311      	orrs	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023bc:	0212      	lsls	r2, r2, #8
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023c4:	0852      	lsrs	r2, r2, #1
 80023c6:	3a01      	subs	r2, #1
 80023c8:	0552      	lsls	r2, r2, #21
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023d0:	0852      	lsrs	r2, r2, #1
 80023d2:	3a01      	subs	r2, #1
 80023d4:	0652      	lsls	r2, r2, #25
 80023d6:	4311      	orrs	r1, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023dc:	0912      	lsrs	r2, r2, #4
 80023de:	0452      	lsls	r2, r2, #17
 80023e0:	430a      	orrs	r2, r1
 80023e2:	4930      	ldr	r1, [pc, #192]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023e8:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2d      	ldr	r2, [pc, #180]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a2a      	ldr	r2, [pc, #168]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 80023fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002400:	f7ff f910 	bl	8001624 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff f90c 	bl	8001624 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e058      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002426:	e050      	b.n	80024ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e04f      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d148      	bne.n	80024ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002450:	f7ff f8e8 	bl	8001624 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff f8e4 	bl	8001624 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e030      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x734>
 8002476:	e028      	b.n	80024ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d023      	beq.n	80024c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <HAL_RCC_OscConfig+0x780>)
 8002484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7ff f8cb 	bl	8001624 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002490:	e00c      	b.n	80024ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7ff f8c7 	bl	8001624 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d905      	bls.n	80024ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e013      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
 80024a4:	40021000 	.word	0x40021000
 80024a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_OscConfig+0x7b0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ec      	bne.n	8002492 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_OscConfig+0x7b0>)
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	4905      	ldr	r1, [pc, #20]	; (80024d4 <HAL_RCC_OscConfig+0x7b0>)
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_OscConfig+0x7b4>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	60cb      	str	r3, [r1, #12]
 80024c4:	e001      	b.n	80024ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	feeefffc 	.word	0xfeeefffc

080024dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0e7      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b75      	ldr	r3, [pc, #468]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d910      	bls.n	8002520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	4970      	ldr	r1, [pc, #448]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b6e      	ldr	r3, [pc, #440]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0cf      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d010      	beq.n	800254e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4b66      	ldr	r3, [pc, #408]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002538:	429a      	cmp	r2, r3
 800253a:	d908      	bls.n	800254e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4960      	ldr	r1, [pc, #384]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d04c      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002562:	4b5a      	ldr	r3, [pc, #360]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d121      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0a6      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257a:	4b54      	ldr	r3, [pc, #336]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d115      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e09a      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002592:	4b4e      	ldr	r3, [pc, #312]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e08e      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a2:	4b4a      	ldr	r3, [pc, #296]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e086      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025b2:	4b46      	ldr	r3, [pc, #280]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4943      	ldr	r1, [pc, #268]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7ff f82e 	bl	8001624 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025cc:	f7ff f82a 	bl	8001624 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e06e      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	4b3a      	ldr	r3, [pc, #232]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 020c 	and.w	r2, r3, #12
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1eb      	bne.n	80025cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d010      	beq.n	8002622 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b31      	ldr	r3, [pc, #196]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260c:	429a      	cmp	r2, r3
 800260e:	d208      	bcs.n	8002622 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002610:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	492b      	ldr	r1, [pc, #172]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d210      	bcs.n	8002652 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 0207 	bic.w	r2, r3, #7
 8002638:	4923      	ldr	r1, [pc, #140]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d001      	beq.n	8002652 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e036      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4918      	ldr	r1, [pc, #96]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800266c:	4313      	orrs	r3, r2
 800266e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4910      	ldr	r1, [pc, #64]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002690:	f000 f824 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	490b      	ldr	r1, [pc, #44]	; (80026d0 <HAL_RCC_ClockConfig+0x1f4>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1fc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe ff65 	bl	8001584 <HAL_InitTick>
 80026ba:	4603      	mov	r3, r0
 80026bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80026be:	7afb      	ldrb	r3, [r7, #11]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08007fc0 	.word	0x08007fc0
 80026d4:	20000008 	.word	0x20000008
 80026d8:	2000000c 	.word	0x2000000c

080026dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ea:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f4:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x34>
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b0c      	cmp	r3, #12
 8002708:	d121      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d11e      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002710:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800271c:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800271e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	e005      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800272c:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002738:	4a2b      	ldr	r2, [pc, #172]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10d      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d102      	bne.n	800275a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	e004      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d101      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002760:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002762:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d134      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800276a:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0xa6>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d003      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0xac>
 8002780:	e005      	b.n	800278e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002784:	617b      	str	r3, [r7, #20]
      break;
 8002786:	e005      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800278a:	617b      	str	r3, [r7, #20]
      break;
 800278c:	e002      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	617b      	str	r3, [r7, #20]
      break;
 8002792:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	3301      	adds	r3, #1
 80027a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	fb03 f202 	mul.w	r2, r3, r2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	0e5b      	lsrs	r3, r3, #25
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	3301      	adds	r3, #1
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027d4:	69bb      	ldr	r3, [r7, #24]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	08007fd8 	.word	0x08007fd8
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000008 	.word	0x20000008

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4904      	ldr	r1, [pc, #16]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	08007fd0 	.word	0x08007fd0

08002838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800283c:	f7ff ffda 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4904      	ldr	r1, [pc, #16]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	08007fd0 	.word	0x08007fd0

08002864 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800287c:	f7ff f9ee 	bl	8001c5c <HAL_PWREx_GetVoltageRange>
 8002880:	6178      	str	r0, [r7, #20]
 8002882:	e014      	b.n	80028ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	4a24      	ldr	r2, [pc, #144]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288e:	6593      	str	r3, [r2, #88]	; 0x58
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800289c:	f7ff f9de 	bl	8001c5c <HAL_PWREx_GetVoltageRange>
 80028a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	4a1d      	ldr	r2, [pc, #116]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b4:	d10b      	bne.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b80      	cmp	r3, #128	; 0x80
 80028ba:	d919      	bls.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2ba0      	cmp	r3, #160	; 0xa0
 80028c0:	d902      	bls.n	80028c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028c2:	2302      	movs	r3, #2
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	e013      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028c8:	2301      	movs	r3, #1
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	e010      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d902      	bls.n	80028da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028d4:	2303      	movs	r3, #3
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	e00a      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b80      	cmp	r3, #128	; 0x80
 80028de:	d102      	bne.n	80028e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028e0:	2302      	movs	r3, #2
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	e004      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b70      	cmp	r3, #112	; 0x70
 80028ea:	d101      	bne.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028ec:	2301      	movs	r3, #1
 80028ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 0207 	bic.w	r2, r3, #7
 80028f8:	4909      	ldr	r1, [pc, #36]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	40022000 	.word	0x40022000

08002924 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800292c:	2300      	movs	r3, #0
 800292e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002930:	2300      	movs	r3, #0
 8002932:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293c:	2b00      	cmp	r3, #0
 800293e:	d041      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002944:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002948:	d02a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800294a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800294e:	d824      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002950:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002954:	d008      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002956:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800295a:	d81e      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002964:	d010      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002966:	e018      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002968:	4b86      	ldr	r3, [pc, #536]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a85      	ldr	r2, [pc, #532]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002972:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002974:	e015      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fabb 	bl	8002ef8 <RCCEx_PLLSAI1_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002986:	e00c      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3320      	adds	r3, #32
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fba6 	bl	80030e0 <RCCEx_PLLSAI2_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002998:	e003      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	74fb      	strb	r3, [r7, #19]
      break;
 800299e:	e000      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a8:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b6:	4973      	ldr	r1, [pc, #460]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029be:	e001      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d041      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029d8:	d02a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80029da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029de:	d824      	bhi.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029e4:	d008      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029ea:	d81e      	bhi.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f4:	d010      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029f6:	e018      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029f8:	4b62      	ldr	r3, [pc, #392]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a61      	ldr	r2, [pc, #388]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a04:	e015      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fa73 	bl	8002ef8 <RCCEx_PLLSAI1_Config>
 8002a12:	4603      	mov	r3, r0
 8002a14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a16:	e00c      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3320      	adds	r3, #32
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fb5e 	bl	80030e0 <RCCEx_PLLSAI2_Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a28:	e003      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a2e:	e000      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a32:	7cfb      	ldrb	r3, [r7, #19]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a38:	4b52      	ldr	r3, [pc, #328]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a46:	494f      	ldr	r1, [pc, #316]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a4e:	e001      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a50:	7cfb      	ldrb	r3, [r7, #19]
 8002a52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a0 	beq.w	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00d      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	4a40      	ldr	r2, [pc, #256]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a86:	6593      	str	r3, [r2, #88]	; 0x58
 8002a88:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a94:	2301      	movs	r3, #1
 8002a96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a98:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3a      	ldr	r2, [pc, #232]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aa4:	f7fe fdbe 	bl	8001624 <HAL_GetTick>
 8002aa8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aaa:	e009      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aac:	f7fe fdba 	bl	8001624 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d902      	bls.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	74fb      	strb	r3, [r7, #19]
        break;
 8002abe:	e005      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ac0:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ef      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d15c      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ad2:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002adc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01f      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d019      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002af0:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	4a1c      	ldr	r2, [pc, #112]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b1c:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fd79 	bl	8001624 <HAL_GetTick>
 8002b32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b34:	e00b      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fe fd75 	bl	8001624 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d902      	bls.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b4c:	e006      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ec      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b72:	4904      	ldr	r1, [pc, #16]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b7a:	e009      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	74bb      	strb	r3, [r7, #18]
 8002b80:	e006      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b90:	7c7b      	ldrb	r3, [r7, #17]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4b9e      	ldr	r3, [pc, #632]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	4a9d      	ldr	r2, [pc, #628]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bae:	4b98      	ldr	r3, [pc, #608]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	f023 0203 	bic.w	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	4994      	ldr	r1, [pc, #592]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bd0:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f023 020c 	bic.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	498c      	ldr	r1, [pc, #560]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bf2:	4b87      	ldr	r3, [pc, #540]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	4983      	ldr	r1, [pc, #524]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c14:	4b7e      	ldr	r3, [pc, #504]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	497b      	ldr	r1, [pc, #492]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c36:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c44:	4972      	ldr	r1, [pc, #456]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c58:	4b6d      	ldr	r3, [pc, #436]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	496a      	ldr	r1, [pc, #424]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c7a:	4b65      	ldr	r3, [pc, #404]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	4961      	ldr	r1, [pc, #388]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c9c:	4b5c      	ldr	r3, [pc, #368]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002caa:	4959      	ldr	r1, [pc, #356]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cbe:	4b54      	ldr	r3, [pc, #336]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ccc:	4950      	ldr	r1, [pc, #320]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ce0:	4b4b      	ldr	r3, [pc, #300]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	4948      	ldr	r1, [pc, #288]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d02:	4b43      	ldr	r3, [pc, #268]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	493f      	ldr	r1, [pc, #252]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d028      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d24:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d32:	4937      	ldr	r1, [pc, #220]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d42:	d106      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d44:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4a31      	ldr	r2, [pc, #196]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d4e:	60d3      	str	r3, [r2, #12]
 8002d50:	e011      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	2101      	movs	r1, #1
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f8c8 	bl	8002ef8 <RCCEx_PLLSAI1_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d82:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	491f      	ldr	r1, [pc, #124]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da0:	d106      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dac:	60d3      	str	r3, [r2, #12]
 8002dae:	e011      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 f899 	bl	8002ef8 <RCCEx_PLLSAI1_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02b      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dfe:	d109      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4a02      	ldr	r2, [pc, #8]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e0a:	60d3      	str	r3, [r2, #12]
 8002e0c:	e014      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2101      	movs	r1, #1
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 f867 	bl	8002ef8 <RCCEx_PLLSAI1_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e2e:	7cfb      	ldrb	r3, [r7, #19]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d02f      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e44:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e52:	4928      	ldr	r1, [pc, #160]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e62:	d10d      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	2102      	movs	r1, #2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 f844 	bl	8002ef8 <RCCEx_PLLSAI1_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d014      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e7a:	7cfb      	ldrb	r3, [r7, #19]
 8002e7c:	74bb      	strb	r3, [r7, #18]
 8002e7e:	e011      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3320      	adds	r3, #32
 8002e8e:	2102      	movs	r1, #2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f925 	bl	80030e0 <RCCEx_PLLSAI2_Config>
 8002e96:	4603      	mov	r3, r0
 8002e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ebe:	490d      	ldr	r1, [pc, #52]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee2:	4904      	ldr	r1, [pc, #16]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002eea:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f06:	4b75      	ldr	r3, [pc, #468]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d018      	beq.n	8002f44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f12:	4b72      	ldr	r3, [pc, #456]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0203 	and.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d10d      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
       ||
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f2a:	4b6c      	ldr	r3, [pc, #432]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
       ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d047      	beq.n	8002fce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	e044      	b.n	8002fce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d018      	beq.n	8002f7e <RCCEx_PLLSAI1_Config+0x86>
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d825      	bhi.n	8002f9c <RCCEx_PLLSAI1_Config+0xa4>
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d002      	beq.n	8002f5a <RCCEx_PLLSAI1_Config+0x62>
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d009      	beq.n	8002f6c <RCCEx_PLLSAI1_Config+0x74>
 8002f58:	e020      	b.n	8002f9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f5a:	4b60      	ldr	r3, [pc, #384]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11d      	bne.n	8002fa2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6a:	e01a      	b.n	8002fa2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f6c:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d116      	bne.n	8002fa6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7c:	e013      	b.n	8002fa6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f7e:	4b57      	ldr	r3, [pc, #348]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f8a:	4b54      	ldr	r3, [pc, #336]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f9a:	e006      	b.n	8002faa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa0:	e004      	b.n	8002fac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e002      	b.n	8002fac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e000      	b.n	8002fac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002faa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10d      	bne.n	8002fce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fb2:	4b4a      	ldr	r3, [pc, #296]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	4944      	ldr	r1, [pc, #272]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d17d      	bne.n	80030d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fd4:	4b41      	ldr	r3, [pc, #260]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a40      	ldr	r2, [pc, #256]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe0:	f7fe fb20 	bl	8001624 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fe6:	e009      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fe8:	f7fe fb1c 	bl	8001624 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d902      	bls.n	8002ffc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	73fb      	strb	r3, [r7, #15]
        break;
 8002ffa:	e005      	b.n	8003008 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ffc:	4b37      	ldr	r3, [pc, #220]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ef      	bne.n	8002fe8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d160      	bne.n	80030d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d111      	bne.n	8003038 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800301c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6892      	ldr	r2, [r2, #8]
 8003024:	0211      	lsls	r1, r2, #8
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68d2      	ldr	r2, [r2, #12]
 800302a:	0912      	lsrs	r2, r2, #4
 800302c:	0452      	lsls	r2, r2, #17
 800302e:	430a      	orrs	r2, r1
 8003030:	492a      	ldr	r1, [pc, #168]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	610b      	str	r3, [r1, #16]
 8003036:	e027      	b.n	8003088 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d112      	bne.n	8003064 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800303e:	4b27      	ldr	r3, [pc, #156]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003046:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6892      	ldr	r2, [r2, #8]
 800304e:	0211      	lsls	r1, r2, #8
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6912      	ldr	r2, [r2, #16]
 8003054:	0852      	lsrs	r2, r2, #1
 8003056:	3a01      	subs	r2, #1
 8003058:	0552      	lsls	r2, r2, #21
 800305a:	430a      	orrs	r2, r1
 800305c:	491f      	ldr	r1, [pc, #124]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	610b      	str	r3, [r1, #16]
 8003062:	e011      	b.n	8003088 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800306c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6892      	ldr	r2, [r2, #8]
 8003074:	0211      	lsls	r1, r2, #8
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6952      	ldr	r2, [r2, #20]
 800307a:	0852      	lsrs	r2, r2, #1
 800307c:	3a01      	subs	r2, #1
 800307e:	0652      	lsls	r2, r2, #25
 8003080:	430a      	orrs	r2, r1
 8003082:	4916      	ldr	r1, [pc, #88]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003084:	4313      	orrs	r3, r2
 8003086:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a13      	ldr	r2, [pc, #76]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800308e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003092:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7fe fac6 	bl	8001624 <HAL_GetTick>
 8003098:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800309a:	e009      	b.n	80030b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800309c:	f7fe fac2 	bl	8001624 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d902      	bls.n	80030b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	73fb      	strb	r3, [r7, #15]
          break;
 80030ae:	e005      	b.n	80030bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ef      	beq.n	800309c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	4904      	ldr	r1, [pc, #16]	; (80030dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000

080030e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ee:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d018      	beq.n	800312c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030fa:	4b67      	ldr	r3, [pc, #412]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0203 	and.w	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d10d      	bne.n	8003126 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
       ||
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003112:	4b61      	ldr	r3, [pc, #388]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
       ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d047      	beq.n	80031b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
 800312a:	e044      	b.n	80031b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d018      	beq.n	8003166 <RCCEx_PLLSAI2_Config+0x86>
 8003134:	2b03      	cmp	r3, #3
 8003136:	d825      	bhi.n	8003184 <RCCEx_PLLSAI2_Config+0xa4>
 8003138:	2b01      	cmp	r3, #1
 800313a:	d002      	beq.n	8003142 <RCCEx_PLLSAI2_Config+0x62>
 800313c:	2b02      	cmp	r3, #2
 800313e:	d009      	beq.n	8003154 <RCCEx_PLLSAI2_Config+0x74>
 8003140:	e020      	b.n	8003184 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003142:	4b55      	ldr	r3, [pc, #340]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d11d      	bne.n	800318a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003152:	e01a      	b.n	800318a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003154:	4b50      	ldr	r3, [pc, #320]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d116      	bne.n	800318e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003164:	e013      	b.n	800318e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003166:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10f      	bne.n	8003192 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003172:	4b49      	ldr	r3, [pc, #292]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003182:	e006      	b.n	8003192 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
      break;
 8003188:	e004      	b.n	8003194 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800318a:	bf00      	nop
 800318c:	e002      	b.n	8003194 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003192:	bf00      	nop
    }

    if(status == HAL_OK)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10d      	bne.n	80031b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6819      	ldr	r1, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	430b      	orrs	r3, r1
 80031b0:	4939      	ldr	r1, [pc, #228]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d167      	bne.n	800328c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031bc:	4b36      	ldr	r3, [pc, #216]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a35      	ldr	r2, [pc, #212]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c8:	f7fe fa2c 	bl	8001624 <HAL_GetTick>
 80031cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031ce:	e009      	b.n	80031e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031d0:	f7fe fa28 	bl	8001624 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d902      	bls.n	80031e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	73fb      	strb	r3, [r7, #15]
        break;
 80031e2:	e005      	b.n	80031f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031e4:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1ef      	bne.n	80031d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d14a      	bne.n	800328c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d111      	bne.n	8003220 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031fc:	4b26      	ldr	r3, [pc, #152]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6892      	ldr	r2, [r2, #8]
 800320c:	0211      	lsls	r1, r2, #8
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68d2      	ldr	r2, [r2, #12]
 8003212:	0912      	lsrs	r2, r2, #4
 8003214:	0452      	lsls	r2, r2, #17
 8003216:	430a      	orrs	r2, r1
 8003218:	491f      	ldr	r1, [pc, #124]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321a:	4313      	orrs	r3, r2
 800321c:	614b      	str	r3, [r1, #20]
 800321e:	e011      	b.n	8003244 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003228:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6892      	ldr	r2, [r2, #8]
 8003230:	0211      	lsls	r1, r2, #8
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6912      	ldr	r2, [r2, #16]
 8003236:	0852      	lsrs	r2, r2, #1
 8003238:	3a01      	subs	r2, #1
 800323a:	0652      	lsls	r2, r2, #25
 800323c:	430a      	orrs	r2, r1
 800323e:	4916      	ldr	r1, [pc, #88]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003240:	4313      	orrs	r3, r2
 8003242:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a13      	ldr	r2, [pc, #76]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7fe f9e8 	bl	8001624 <HAL_GetTick>
 8003254:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003256:	e009      	b.n	800326c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003258:	f7fe f9e4 	bl	8001624 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d902      	bls.n	800326c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	73fb      	strb	r3, [r7, #15]
          break;
 800326a:	e005      	b.n	8003278 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0ef      	beq.n	8003258 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	4904      	ldr	r1, [pc, #16]	; (8003298 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003288:	4313      	orrs	r3, r2
 800328a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800328c:	7bfb      	ldrb	r3, [r7, #15]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000

0800329c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e095      	b.n	80033da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d108      	bne.n	80032c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032be:	d009      	beq.n	80032d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
 80032c6:	e005      	b.n	80032d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd ff40 	bl	8001174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800330a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003314:	d902      	bls.n	800331c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e002      	b.n	8003322 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800331c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003320:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800332a:	d007      	beq.n	800333c <HAL_SPI_Init+0xa0>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003334:	d002      	beq.n	800333c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	ea42 0103 	orr.w	r1, r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	f003 0204 	and.w	r2, r3, #4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033b8:	ea42 0103 	orr.w	r1, r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b088      	sub	sp, #32
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	603b      	str	r3, [r7, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_SPI_Transmit+0x22>
 8003400:	2302      	movs	r3, #2
 8003402:	e158      	b.n	80036b6 <HAL_SPI_Transmit+0x2d4>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800340c:	f7fe f90a 	bl	8001624 <HAL_GetTick>
 8003410:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d002      	beq.n	8003428 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003422:	2302      	movs	r3, #2
 8003424:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003426:	e13d      	b.n	80036a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_SPI_Transmit+0x52>
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003438:	e134      	b.n	80036a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2203      	movs	r2, #3
 800343e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	88fa      	ldrh	r2, [r7, #6]
 8003452:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003484:	d10f      	bne.n	80034a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003494:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d007      	beq.n	80034c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034cc:	d94b      	bls.n	8003566 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_SPI_Transmit+0xfa>
 80034d6:	8afb      	ldrh	r3, [r7, #22]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d13e      	bne.n	800355a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	881a      	ldrh	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	1c9a      	adds	r2, r3, #2
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003500:	e02b      	b.n	800355a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b02      	cmp	r3, #2
 800350e:	d112      	bne.n	8003536 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	881a      	ldrh	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	1c9a      	adds	r2, r3, #2
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003534:	e011      	b.n	800355a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003536:	f7fe f875 	bl	8001624 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d803      	bhi.n	800354e <HAL_SPI_Transmit+0x16c>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d102      	bne.n	8003554 <HAL_SPI_Transmit+0x172>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003558:	e0a4      	b.n	80036a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ce      	bne.n	8003502 <HAL_SPI_Transmit+0x120>
 8003564:	e07c      	b.n	8003660 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_SPI_Transmit+0x192>
 800356e:	8afb      	ldrh	r3, [r7, #22]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d170      	bne.n	8003656 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d912      	bls.n	80035a4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	881a      	ldrh	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	1c9a      	adds	r2, r3, #2
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b02      	subs	r3, #2
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035a2:	e058      	b.n	8003656 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035ca:	e044      	b.n	8003656 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d12b      	bne.n	8003632 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d912      	bls.n	800360a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	881a      	ldrh	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	1c9a      	adds	r2, r3, #2
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b02      	subs	r3, #2
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003608:	e025      	b.n	8003656 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330c      	adds	r3, #12
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003630:	e011      	b.n	8003656 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003632:	f7fd fff7 	bl	8001624 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d803      	bhi.n	800364a <HAL_SPI_Transmit+0x268>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d102      	bne.n	8003650 <HAL_SPI_Transmit+0x26e>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003654:	e026      	b.n	80036a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1b5      	bne.n	80035cc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	6839      	ldr	r1, [r7, #0]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f949 	bl	80038fc <SPI_EndRxTxTransaction>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e000      	b.n	80036a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80036a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036d0:	f7fd ffa8 	bl	8001624 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	4413      	add	r3, r2
 80036de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036e0:	f7fd ffa0 	bl	8001624 <HAL_GetTick>
 80036e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	015b      	lsls	r3, r3, #5
 80036ec:	0d1b      	lsrs	r3, r3, #20
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	fb02 f303 	mul.w	r3, r2, r3
 80036f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036f6:	e054      	b.n	80037a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d050      	beq.n	80037a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003700:	f7fd ff90 	bl	8001624 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	429a      	cmp	r2, r3
 800370e:	d902      	bls.n	8003716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d13d      	bne.n	8003792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372e:	d111      	bne.n	8003754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003738:	d004      	beq.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003742:	d107      	bne.n	8003754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375c:	d10f      	bne.n	800377e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800377c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e017      	b.n	80037c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	3b01      	subs	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4013      	ands	r3, r2
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	bf0c      	ite	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	2300      	movne	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d19b      	bne.n	80036f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000008 	.word	0x20000008

080037d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037e2:	f7fd ff1f 	bl	8001624 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	4413      	add	r3, r2
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80037f2:	f7fd ff17 	bl	8001624 <HAL_GetTick>
 80037f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003800:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	00da      	lsls	r2, r3, #3
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	0d1b      	lsrs	r3, r3, #20
 8003810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003818:	e060      	b.n	80038dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003820:	d107      	bne.n	8003832 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003830:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d050      	beq.n	80038dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800383a:	f7fd fef3 	bl	8001624 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	429a      	cmp	r2, r3
 8003848:	d902      	bls.n	8003850 <SPI_WaitFifoStateUntilTimeout+0x80>
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	2b00      	cmp	r3, #0
 800384e:	d13d      	bne.n	80038cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800385e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003868:	d111      	bne.n	800388e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003872:	d004      	beq.n	800387e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387c:	d107      	bne.n	800388e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003896:	d10f      	bne.n	80038b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e010      	b.n	80038ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	3b01      	subs	r3, #1
 80038da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4013      	ands	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d196      	bne.n	800381a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3728      	adds	r7, #40	; 0x28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000008 	.word	0x20000008

080038fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2200      	movs	r2, #0
 8003910:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f7ff ff5b 	bl	80037d0 <SPI_WaitFifoStateUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	f043 0220 	orr.w	r2, r3, #32
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e027      	b.n	8003980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2200      	movs	r2, #0
 8003938:	2180      	movs	r1, #128	; 0x80
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7ff fec0 	bl	80036c0 <SPI_WaitFlagStateUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394a:	f043 0220 	orr.w	r2, r3, #32
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e014      	b.n	8003980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2200      	movs	r2, #0
 800395e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff ff34 	bl	80037d0 <SPI_WaitFifoStateUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e000      	b.n	8003980 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e049      	b.n	8003a2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd fcf4 	bl	800139c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3304      	adds	r3, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f000 f9ee 	bl	8003da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d001      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e04f      	b.n	8003af0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a23      	ldr	r2, [pc, #140]	; (8003afc <HAL_TIM_Base_Start_IT+0xc4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01d      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7a:	d018      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1e      	ldr	r2, [pc, #120]	; (8003b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00e      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1c      	ldr	r2, [pc, #112]	; (8003b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d009      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1b      	ldr	r2, [pc, #108]	; (8003b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d115      	bne.n	8003ada <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b06      	cmp	r3, #6
 8003abe:	d015      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0xb4>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac6:	d011      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad8:	e008      	b.n	8003aec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e000      	b.n	8003aee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00
 8003b0c:	40013400 	.word	0x40013400
 8003b10:	40014000 	.word	0x40014000
 8003b14:	00010007 	.word	0x00010007

08003b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0202 	mvn.w	r2, #2
 8003b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f905 	bl	8003d6a <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f8f7 	bl	8003d56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f908 	bl	8003d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0204 	mvn.w	r2, #4
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f8db 	bl	8003d6a <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f8cd 	bl	8003d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f8de 	bl	8003d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d122      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d11b      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0208 	mvn.w	r2, #8
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8b1 	bl	8003d6a <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f8a3 	bl	8003d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f8b4 	bl	8003d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d122      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d11b      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0210 	mvn.w	r2, #16
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2208      	movs	r2, #8
 8003c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f887 	bl	8003d6a <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f879 	bl	8003d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f88a 	bl	8003d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10e      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0201 	mvn.w	r2, #1
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fc fe04 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b80      	cmp	r3, #128	; 0x80
 8003ca8:	d10e      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb4:	2b80      	cmp	r3, #128	; 0x80
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f99c 	bl	8004000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd6:	d10e      	bne.n	8003cf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b80      	cmp	r3, #128	; 0x80
 8003ce4:	d107      	bne.n	8003cf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f98f 	bl	8004014 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d10e      	bne.n	8003d22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d107      	bne.n	8003d22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f838 	bl	8003d92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d10e      	bne.n	8003d4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d107      	bne.n	8003d4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f06f 0220 	mvn.w	r2, #32
 8003d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f94f 	bl	8003fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a40      	ldr	r2, [pc, #256]	; (8003ebc <TIM_Base_SetConfig+0x114>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <TIM_Base_SetConfig+0x40>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc6:	d00f      	beq.n	8003de8 <TIM_Base_SetConfig+0x40>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a3d      	ldr	r2, [pc, #244]	; (8003ec0 <TIM_Base_SetConfig+0x118>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00b      	beq.n	8003de8 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a3c      	ldr	r2, [pc, #240]	; (8003ec4 <TIM_Base_SetConfig+0x11c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a3b      	ldr	r2, [pc, #236]	; (8003ec8 <TIM_Base_SetConfig+0x120>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a3a      	ldr	r2, [pc, #232]	; (8003ecc <TIM_Base_SetConfig+0x124>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d108      	bne.n	8003dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a2f      	ldr	r2, [pc, #188]	; (8003ebc <TIM_Base_SetConfig+0x114>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01f      	beq.n	8003e42 <TIM_Base_SetConfig+0x9a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e08:	d01b      	beq.n	8003e42 <TIM_Base_SetConfig+0x9a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2c      	ldr	r2, [pc, #176]	; (8003ec0 <TIM_Base_SetConfig+0x118>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d017      	beq.n	8003e42 <TIM_Base_SetConfig+0x9a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a2b      	ldr	r2, [pc, #172]	; (8003ec4 <TIM_Base_SetConfig+0x11c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <TIM_Base_SetConfig+0x9a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a2a      	ldr	r2, [pc, #168]	; (8003ec8 <TIM_Base_SetConfig+0x120>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00f      	beq.n	8003e42 <TIM_Base_SetConfig+0x9a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a29      	ldr	r2, [pc, #164]	; (8003ecc <TIM_Base_SetConfig+0x124>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00b      	beq.n	8003e42 <TIM_Base_SetConfig+0x9a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a28      	ldr	r2, [pc, #160]	; (8003ed0 <TIM_Base_SetConfig+0x128>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d007      	beq.n	8003e42 <TIM_Base_SetConfig+0x9a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <TIM_Base_SetConfig+0x12c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_Base_SetConfig+0x9a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <TIM_Base_SetConfig+0x130>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d108      	bne.n	8003e54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a10      	ldr	r2, [pc, #64]	; (8003ebc <TIM_Base_SetConfig+0x114>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00f      	beq.n	8003ea0 <TIM_Base_SetConfig+0xf8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <TIM_Base_SetConfig+0x124>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00b      	beq.n	8003ea0 <TIM_Base_SetConfig+0xf8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <TIM_Base_SetConfig+0x128>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d007      	beq.n	8003ea0 <TIM_Base_SetConfig+0xf8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <TIM_Base_SetConfig+0x12c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <TIM_Base_SetConfig+0xf8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ed8 <TIM_Base_SetConfig+0x130>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d103      	bne.n	8003ea8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	615a      	str	r2, [r3, #20]
}
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800
 8003ec8:	40000c00 	.word	0x40000c00
 8003ecc:	40013400 	.word	0x40013400
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	40014400 	.word	0x40014400
 8003ed8:	40014800 	.word	0x40014800

08003edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e068      	b.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a2e      	ldr	r2, [pc, #184]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2d      	ldr	r2, [pc, #180]	; (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d108      	bne.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01d      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f66:	d018      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d10c      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40013400 	.word	0x40013400
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	40000c00 	.word	0x40000c00
 8003fe8:	40014000 	.word	0x40014000

08003fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e040      	b.n	80040bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd f9fc 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0201 	bic.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f82c 	bl	80040c4 <UART_SetConfig>
 800406c:	4603      	mov	r3, r0
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e022      	b.n	80040bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fad8 	bl	8004634 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fb5f 	bl	8004778 <UART_CheckIdleState>
 80040ba:	4603      	mov	r3, r0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c8:	b08a      	sub	sp, #40	; 0x28
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4ba4      	ldr	r3, [pc, #656]	; (8004384 <UART_SetConfig+0x2c0>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a99      	ldr	r2, [pc, #612]	; (8004388 <UART_SetConfig+0x2c4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	4313      	orrs	r3, r2
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004140:	430a      	orrs	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a90      	ldr	r2, [pc, #576]	; (800438c <UART_SetConfig+0x2c8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d126      	bne.n	800419c <UART_SetConfig+0xd8>
 800414e:	4b90      	ldr	r3, [pc, #576]	; (8004390 <UART_SetConfig+0x2cc>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b03      	cmp	r3, #3
 800415a:	d81b      	bhi.n	8004194 <UART_SetConfig+0xd0>
 800415c:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <UART_SetConfig+0xa0>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004175 	.word	0x08004175
 8004168:	08004185 	.word	0x08004185
 800416c:	0800417d 	.word	0x0800417d
 8004170:	0800418d 	.word	0x0800418d
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417a:	e116      	b.n	80043aa <UART_SetConfig+0x2e6>
 800417c:	2302      	movs	r3, #2
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004182:	e112      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004184:	2304      	movs	r3, #4
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418a:	e10e      	b.n	80043aa <UART_SetConfig+0x2e6>
 800418c:	2308      	movs	r3, #8
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004192:	e10a      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004194:	2310      	movs	r3, #16
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419a:	e106      	b.n	80043aa <UART_SetConfig+0x2e6>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a7c      	ldr	r2, [pc, #496]	; (8004394 <UART_SetConfig+0x2d0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d138      	bne.n	8004218 <UART_SetConfig+0x154>
 80041a6:	4b7a      	ldr	r3, [pc, #488]	; (8004390 <UART_SetConfig+0x2cc>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	d82d      	bhi.n	8004210 <UART_SetConfig+0x14c>
 80041b4:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <UART_SetConfig+0xf8>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041f1 	.word	0x080041f1
 80041c0:	08004211 	.word	0x08004211
 80041c4:	08004211 	.word	0x08004211
 80041c8:	08004211 	.word	0x08004211
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004211 	.word	0x08004211
 80041d4:	08004211 	.word	0x08004211
 80041d8:	08004211 	.word	0x08004211
 80041dc:	080041f9 	.word	0x080041f9
 80041e0:	08004211 	.word	0x08004211
 80041e4:	08004211 	.word	0x08004211
 80041e8:	08004211 	.word	0x08004211
 80041ec:	08004209 	.word	0x08004209
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f6:	e0d8      	b.n	80043aa <UART_SetConfig+0x2e6>
 80041f8:	2302      	movs	r3, #2
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fe:	e0d4      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004200:	2304      	movs	r3, #4
 8004202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004206:	e0d0      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004208:	2308      	movs	r3, #8
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420e:	e0cc      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004210:	2310      	movs	r3, #16
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004216:	e0c8      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a5e      	ldr	r2, [pc, #376]	; (8004398 <UART_SetConfig+0x2d4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d125      	bne.n	800426e <UART_SetConfig+0x1aa>
 8004222:	4b5b      	ldr	r3, [pc, #364]	; (8004390 <UART_SetConfig+0x2cc>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800422c:	2b30      	cmp	r3, #48	; 0x30
 800422e:	d016      	beq.n	800425e <UART_SetConfig+0x19a>
 8004230:	2b30      	cmp	r3, #48	; 0x30
 8004232:	d818      	bhi.n	8004266 <UART_SetConfig+0x1a2>
 8004234:	2b20      	cmp	r3, #32
 8004236:	d00a      	beq.n	800424e <UART_SetConfig+0x18a>
 8004238:	2b20      	cmp	r3, #32
 800423a:	d814      	bhi.n	8004266 <UART_SetConfig+0x1a2>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <UART_SetConfig+0x182>
 8004240:	2b10      	cmp	r3, #16
 8004242:	d008      	beq.n	8004256 <UART_SetConfig+0x192>
 8004244:	e00f      	b.n	8004266 <UART_SetConfig+0x1a2>
 8004246:	2300      	movs	r3, #0
 8004248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424c:	e0ad      	b.n	80043aa <UART_SetConfig+0x2e6>
 800424e:	2302      	movs	r3, #2
 8004250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004254:	e0a9      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004256:	2304      	movs	r3, #4
 8004258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425c:	e0a5      	b.n	80043aa <UART_SetConfig+0x2e6>
 800425e:	2308      	movs	r3, #8
 8004260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004264:	e0a1      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004266:	2310      	movs	r3, #16
 8004268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426c:	e09d      	b.n	80043aa <UART_SetConfig+0x2e6>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a4a      	ldr	r2, [pc, #296]	; (800439c <UART_SetConfig+0x2d8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d125      	bne.n	80042c4 <UART_SetConfig+0x200>
 8004278:	4b45      	ldr	r3, [pc, #276]	; (8004390 <UART_SetConfig+0x2cc>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004282:	2bc0      	cmp	r3, #192	; 0xc0
 8004284:	d016      	beq.n	80042b4 <UART_SetConfig+0x1f0>
 8004286:	2bc0      	cmp	r3, #192	; 0xc0
 8004288:	d818      	bhi.n	80042bc <UART_SetConfig+0x1f8>
 800428a:	2b80      	cmp	r3, #128	; 0x80
 800428c:	d00a      	beq.n	80042a4 <UART_SetConfig+0x1e0>
 800428e:	2b80      	cmp	r3, #128	; 0x80
 8004290:	d814      	bhi.n	80042bc <UART_SetConfig+0x1f8>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <UART_SetConfig+0x1d8>
 8004296:	2b40      	cmp	r3, #64	; 0x40
 8004298:	d008      	beq.n	80042ac <UART_SetConfig+0x1e8>
 800429a:	e00f      	b.n	80042bc <UART_SetConfig+0x1f8>
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e082      	b.n	80043aa <UART_SetConfig+0x2e6>
 80042a4:	2302      	movs	r3, #2
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042aa:	e07e      	b.n	80043aa <UART_SetConfig+0x2e6>
 80042ac:	2304      	movs	r3, #4
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b2:	e07a      	b.n	80043aa <UART_SetConfig+0x2e6>
 80042b4:	2308      	movs	r3, #8
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ba:	e076      	b.n	80043aa <UART_SetConfig+0x2e6>
 80042bc:	2310      	movs	r3, #16
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e072      	b.n	80043aa <UART_SetConfig+0x2e6>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a35      	ldr	r2, [pc, #212]	; (80043a0 <UART_SetConfig+0x2dc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d12a      	bne.n	8004324 <UART_SetConfig+0x260>
 80042ce:	4b30      	ldr	r3, [pc, #192]	; (8004390 <UART_SetConfig+0x2cc>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042dc:	d01a      	beq.n	8004314 <UART_SetConfig+0x250>
 80042de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e2:	d81b      	bhi.n	800431c <UART_SetConfig+0x258>
 80042e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e8:	d00c      	beq.n	8004304 <UART_SetConfig+0x240>
 80042ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ee:	d815      	bhi.n	800431c <UART_SetConfig+0x258>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <UART_SetConfig+0x238>
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f8:	d008      	beq.n	800430c <UART_SetConfig+0x248>
 80042fa:	e00f      	b.n	800431c <UART_SetConfig+0x258>
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004302:	e052      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004304:	2302      	movs	r3, #2
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e04e      	b.n	80043aa <UART_SetConfig+0x2e6>
 800430c:	2304      	movs	r3, #4
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e04a      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004314:	2308      	movs	r3, #8
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	e046      	b.n	80043aa <UART_SetConfig+0x2e6>
 800431c:	2310      	movs	r3, #16
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004322:	e042      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a17      	ldr	r2, [pc, #92]	; (8004388 <UART_SetConfig+0x2c4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d13a      	bne.n	80043a4 <UART_SetConfig+0x2e0>
 800432e:	4b18      	ldr	r3, [pc, #96]	; (8004390 <UART_SetConfig+0x2cc>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800433c:	d01a      	beq.n	8004374 <UART_SetConfig+0x2b0>
 800433e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004342:	d81b      	bhi.n	800437c <UART_SetConfig+0x2b8>
 8004344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004348:	d00c      	beq.n	8004364 <UART_SetConfig+0x2a0>
 800434a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434e:	d815      	bhi.n	800437c <UART_SetConfig+0x2b8>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <UART_SetConfig+0x298>
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004358:	d008      	beq.n	800436c <UART_SetConfig+0x2a8>
 800435a:	e00f      	b.n	800437c <UART_SetConfig+0x2b8>
 800435c:	2300      	movs	r3, #0
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004362:	e022      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004364:	2302      	movs	r3, #2
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436a:	e01e      	b.n	80043aa <UART_SetConfig+0x2e6>
 800436c:	2304      	movs	r3, #4
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004372:	e01a      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004374:	2308      	movs	r3, #8
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437a:	e016      	b.n	80043aa <UART_SetConfig+0x2e6>
 800437c:	2310      	movs	r3, #16
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e012      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004384:	efff69f3 	.word	0xefff69f3
 8004388:	40008000 	.word	0x40008000
 800438c:	40013800 	.word	0x40013800
 8004390:	40021000 	.word	0x40021000
 8004394:	40004400 	.word	0x40004400
 8004398:	40004800 	.word	0x40004800
 800439c:	40004c00 	.word	0x40004c00
 80043a0:	40005000 	.word	0x40005000
 80043a4:	2310      	movs	r3, #16
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a9f      	ldr	r2, [pc, #636]	; (800462c <UART_SetConfig+0x568>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d17a      	bne.n	80044aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d824      	bhi.n	8004406 <UART_SetConfig+0x342>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <UART_SetConfig+0x300>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043e9 	.word	0x080043e9
 80043c8:	08004407 	.word	0x08004407
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	08004407 	.word	0x08004407
 80043d4:	080043f7 	.word	0x080043f7
 80043d8:	08004407 	.word	0x08004407
 80043dc:	08004407 	.word	0x08004407
 80043e0:	08004407 	.word	0x08004407
 80043e4:	080043ff 	.word	0x080043ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e8:	f7fe fa10 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 80043ec:	61f8      	str	r0, [r7, #28]
        break;
 80043ee:	e010      	b.n	8004412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f0:	4b8f      	ldr	r3, [pc, #572]	; (8004630 <UART_SetConfig+0x56c>)
 80043f2:	61fb      	str	r3, [r7, #28]
        break;
 80043f4:	e00d      	b.n	8004412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043f6:	f7fe f971 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 80043fa:	61f8      	str	r0, [r7, #28]
        break;
 80043fc:	e009      	b.n	8004412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004402:	61fb      	str	r3, [r7, #28]
        break;
 8004404:	e005      	b.n	8004412 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004410:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80fb 	beq.w	8004610 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	4413      	add	r3, r2
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	429a      	cmp	r2, r3
 8004428:	d305      	bcc.n	8004436 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	429a      	cmp	r2, r3
 8004434:	d903      	bls.n	800443e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800443c:	e0e8      	b.n	8004610 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2200      	movs	r2, #0
 8004442:	461c      	mov	r4, r3
 8004444:	4615      	mov	r5, r2
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	022b      	lsls	r3, r5, #8
 8004450:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004454:	0222      	lsls	r2, r4, #8
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	6849      	ldr	r1, [r1, #4]
 800445a:	0849      	lsrs	r1, r1, #1
 800445c:	2000      	movs	r0, #0
 800445e:	4688      	mov	r8, r1
 8004460:	4681      	mov	r9, r0
 8004462:	eb12 0a08 	adds.w	sl, r2, r8
 8004466:	eb43 0b09 	adc.w	fp, r3, r9
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004478:	4650      	mov	r0, sl
 800447a:	4659      	mov	r1, fp
 800447c:	f7fb fea4 	bl	80001c8 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4613      	mov	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800448e:	d308      	bcc.n	80044a2 <UART_SetConfig+0x3de>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004496:	d204      	bcs.n	80044a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	60da      	str	r2, [r3, #12]
 80044a0:	e0b6      	b.n	8004610 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044a8:	e0b2      	b.n	8004610 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b2:	d15e      	bne.n	8004572 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80044b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d828      	bhi.n	800450e <UART_SetConfig+0x44a>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <UART_SetConfig+0x400>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	080044f1 	.word	0x080044f1
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	0800450f 	.word	0x0800450f
 80044d4:	080044ff 	.word	0x080044ff
 80044d8:	0800450f 	.word	0x0800450f
 80044dc:	0800450f 	.word	0x0800450f
 80044e0:	0800450f 	.word	0x0800450f
 80044e4:	08004507 	.word	0x08004507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e8:	f7fe f990 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 80044ec:	61f8      	str	r0, [r7, #28]
        break;
 80044ee:	e014      	b.n	800451a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f0:	f7fe f9a2 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 80044f4:	61f8      	str	r0, [r7, #28]
        break;
 80044f6:	e010      	b.n	800451a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f8:	4b4d      	ldr	r3, [pc, #308]	; (8004630 <UART_SetConfig+0x56c>)
 80044fa:	61fb      	str	r3, [r7, #28]
        break;
 80044fc:	e00d      	b.n	800451a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fe:	f7fe f8ed 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8004502:	61f8      	str	r0, [r7, #28]
        break;
 8004504:	e009      	b.n	800451a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800450a:	61fb      	str	r3, [r7, #28]
        break;
 800450c:	e005      	b.n	800451a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d077      	beq.n	8004610 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	005a      	lsls	r2, r3, #1
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	441a      	add	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b0f      	cmp	r3, #15
 800453a:	d916      	bls.n	800456a <UART_SetConfig+0x4a6>
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004542:	d212      	bcs.n	800456a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f023 030f 	bic.w	r3, r3, #15
 800454c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	b29b      	uxth	r3, r3
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	b29a      	uxth	r2, r3
 800455a:	8afb      	ldrh	r3, [r7, #22]
 800455c:	4313      	orrs	r3, r2
 800455e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	8afa      	ldrh	r2, [r7, #22]
 8004566:	60da      	str	r2, [r3, #12]
 8004568:	e052      	b.n	8004610 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004570:	e04e      	b.n	8004610 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004572:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004576:	2b08      	cmp	r3, #8
 8004578:	d827      	bhi.n	80045ca <UART_SetConfig+0x506>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <UART_SetConfig+0x4bc>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	080045a5 	.word	0x080045a5
 8004584:	080045ad 	.word	0x080045ad
 8004588:	080045b5 	.word	0x080045b5
 800458c:	080045cb 	.word	0x080045cb
 8004590:	080045bb 	.word	0x080045bb
 8004594:	080045cb 	.word	0x080045cb
 8004598:	080045cb 	.word	0x080045cb
 800459c:	080045cb 	.word	0x080045cb
 80045a0:	080045c3 	.word	0x080045c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a4:	f7fe f932 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 80045a8:	61f8      	str	r0, [r7, #28]
        break;
 80045aa:	e014      	b.n	80045d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045ac:	f7fe f944 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 80045b0:	61f8      	str	r0, [r7, #28]
        break;
 80045b2:	e010      	b.n	80045d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b4:	4b1e      	ldr	r3, [pc, #120]	; (8004630 <UART_SetConfig+0x56c>)
 80045b6:	61fb      	str	r3, [r7, #28]
        break;
 80045b8:	e00d      	b.n	80045d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ba:	f7fe f88f 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 80045be:	61f8      	str	r0, [r7, #28]
        break;
 80045c0:	e009      	b.n	80045d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045c6:	61fb      	str	r3, [r7, #28]
        break;
 80045c8:	e005      	b.n	80045d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045d4:	bf00      	nop
    }

    if (pclk != 0U)
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d019      	beq.n	8004610 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	085a      	lsrs	r2, r3, #1
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	441a      	add	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	d909      	bls.n	800460a <UART_SetConfig+0x546>
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045fc:	d205      	bcs.n	800460a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	e002      	b.n	8004610 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800461c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004620:	4618      	mov	r0, r3
 8004622:	3728      	adds	r7, #40	; 0x28
 8004624:	46bd      	mov	sp, r7
 8004626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800462a:	bf00      	nop
 800462c:	40008000 	.word	0x40008000
 8004630:	00f42400 	.word	0x00f42400

08004634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01a      	beq.n	800474a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004732:	d10a      	bne.n	800474a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
  }
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af02      	add	r7, sp, #8
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004788:	f7fc ff4c 	bl	8001624 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b08      	cmp	r3, #8
 800479a:	d10e      	bne.n	80047ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800479c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f82d 	bl	800480a <UART_WaitOnFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e023      	b.n	8004802 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d10e      	bne.n	80047e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f817 	bl	800480a <UART_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e00d      	b.n	8004802 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b09c      	sub	sp, #112	; 0x70
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	4613      	mov	r3, r2
 8004818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481a:	e0a5      	b.n	8004968 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004822:	f000 80a1 	beq.w	8004968 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004826:	f7fc fefd 	bl	8001624 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <UART_WaitOnFlagUntilTimeout+0x32>
 8004836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004838:	2b00      	cmp	r3, #0
 800483a:	d13e      	bne.n	80048ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800484a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004850:	667b      	str	r3, [r7, #100]	; 0x64
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800485a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800485c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e6      	bne.n	800483c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	663b      	str	r3, [r7, #96]	; 0x60
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3308      	adds	r3, #8
 800488c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800488e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004890:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800489c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e5      	bne.n	800486e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e067      	b.n	800498a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d04f      	beq.n	8004968 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d6:	d147      	bne.n	8004968 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
 8004902:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e6      	bne.n	80048e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	613b      	str	r3, [r7, #16]
   return(result);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	66bb      	str	r3, [r7, #104]	; 0x68
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004934:	623a      	str	r2, [r7, #32]
 8004936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	69f9      	ldr	r1, [r7, #28]
 800493a:	6a3a      	ldr	r2, [r7, #32]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	61bb      	str	r3, [r7, #24]
   return(result);
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e5      	bne.n	8004914 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e010      	b.n	800498a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4013      	ands	r3, r2
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	429a      	cmp	r2, r3
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	429a      	cmp	r2, r3
 8004984:	f43f af4a 	beq.w	800481c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3770      	adds	r7, #112	; 0x70
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	881a      	ldrh	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	799b      	ldrb	r3, [r3, #6]
 80049a4:	08db      	lsrs	r3, r3, #3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	fb12 f303 	smulbb	r3, r2, r3
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	889b      	ldrh	r3, [r3, #4]
 80049b8:	461a      	mov	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	885b      	ldrh	r3, [r3, #2]
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	60da      	str	r2, [r3, #12]
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	3306      	adds	r3, #6
 80049ea:	2208      	movs	r2, #8
 80049ec:	4619      	mov	r1, r3
 80049ee:	f000 fa8b 	bl	8004f08 <memcpy>
    meta->width = font[FONTX_WIDTH];
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	330e      	adds	r3, #14
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	330f      	adds	r3, #15
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	3310      	adds	r3, #16
 8004a0a:	781a      	ldrb	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	72da      	strb	r2, [r3, #11]

    return 0;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b08e      	sub	sp, #56	; 0x38
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8004a26:	f107 0314 	add.w	r3, r7, #20
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff ffd4 	bl	80049da <fontx_meta>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8004a38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <fontx_glyph+0x2c>
        return status;
 8004a40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a44:	e077      	b.n	8004b36 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8004a46:	7f7a      	ldrb	r2, [r7, #29]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8004a4c:	7fba      	ldrb	r2, [r7, #30]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8004a52:	7f7b      	ldrb	r3, [r7, #29]
 8004a54:	3307      	adds	r3, #7
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da00      	bge.n	8004a5c <fontx_glyph+0x42>
 8004a5a:	3307      	adds	r3, #7
 8004a5c:	10db      	asrs	r3, r3, #3
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	78da      	ldrb	r2, [r3, #3]
 8004a68:	7fbb      	ldrb	r3, [r7, #30]
 8004a6a:	fb12 f303 	smulbb	r3, r2, r3
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8004a74:	7ffb      	ldrb	r3, [r7, #31]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10f      	bne.n	8004a9a <fontx_glyph+0x80>
        if (code < 0x100) {
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2bff      	cmp	r3, #255	; 0xff
 8004a7e:	d859      	bhi.n	8004b34 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	789b      	ldrb	r3, [r3, #2]
 8004a84:	461a      	mov	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	fb02 f303 	mul.w	r3, r2, r3
 8004a8c:	3311      	adds	r3, #17
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	441a      	add	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e04d      	b.n	8004b36 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3312      	adds	r3, #18
 8004a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3311      	adds	r3, #17
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8004aac:	e03d      	b.n	8004b2a <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	4413      	add	r3, r2
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	3302      	adds	r3, #2
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	3303      	adds	r3, #3
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	4413      	add	r3, r2
 8004ad2:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d31c      	bcc.n	8004b16 <fontx_glyph+0xfc>
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d818      	bhi.n	8004b16 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aec:	4413      	add	r3, r2
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3311      	adds	r3, #17
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	461a      	mov	r2, r3
                    nc * glyph->size
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	789b      	ldrb	r3, [r3, #2]
 8004afe:	4619      	mov	r1, r3
 8004b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b02:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8004b06:	4413      	add	r3, r2
 8004b08:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	441a      	add	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e00f      	b.n	8004b36 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8004b16:	6a3a      	ldr	r2, [r7, #32]
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	1ad2      	subs	r2, r2, r3
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	4413      	add	r3, r2
 8004b20:	3301      	adds	r3, #1
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	3304      	adds	r3, #4
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	1e5a      	subs	r2, r3, #1
 8004b2e:	633a      	str	r2, [r7, #48]	; 0x30
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1bc      	bne.n	8004aae <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8004b34:	2301      	movs	r3, #1
 8004b36:	4618      	mov	r0, r3
 8004b38:	3738      	adds	r7, #56	; 0x38
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	80fb      	strh	r3, [r7, #6]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	80bb      	strh	r3, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8004b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <hagl_put_pixel+0x60>)
 8004b58:	8812      	ldrh	r2, [r2, #0]
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	db1a      	blt.n	8004b94 <hagl_put_pixel+0x54>
 8004b5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b62:	4a0f      	ldr	r2, [pc, #60]	; (8004ba0 <hagl_put_pixel+0x60>)
 8004b64:	8852      	ldrh	r2, [r2, #2]
 8004b66:	4293      	cmp	r3, r2
 8004b68:	db14      	blt.n	8004b94 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8004b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <hagl_put_pixel+0x60>)
 8004b70:	8892      	ldrh	r2, [r2, #4]
 8004b72:	4293      	cmp	r3, r2
 8004b74:	dc10      	bgt.n	8004b98 <hagl_put_pixel+0x58>
 8004b76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b7a:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <hagl_put_pixel+0x60>)
 8004b7c:	88d2      	ldrh	r2, [r2, #6]
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	dc0a      	bgt.n	8004b98 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8004b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b86:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004b8a:	887a      	ldrh	r2, [r7, #2]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fb fe15 	bl	80007bc <lcd_put_pixel>
 8004b92:	e002      	b.n	8004b9a <hagl_put_pixel+0x5a>
        return;
 8004b94:	bf00      	nop
 8004b96:	e000      	b.n	8004b9a <hagl_put_pixel+0x5a>
        return;
 8004b98:	bf00      	nop
}
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000014 	.word	0x20000014

08004ba4 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004bb2:	f844 0c24 	str.w	r0, [r4, #-36]
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4619      	mov	r1, r3
 8004bbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bc0:	4622      	mov	r2, r4
 8004bc2:	f823 2c26 	strh.w	r2, [r3, #-38]
 8004bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bca:	4602      	mov	r2, r0
 8004bcc:	f823 2c28 	strh.w	r2, [r3, #-40]
 8004bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bd4:	460a      	mov	r2, r1
 8004bd6:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8004bda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bde:	4619      	mov	r1, r3
 8004be0:	f107 0310 	add.w	r3, r7, #16
 8004be4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff ff13 	bl	8004a1a <fontx_glyph>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004bfa:	f102 0209 	add.w	r2, r2, #9
 8004bfe:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8004c00:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004c04:	f103 0309 	add.w	r3, r3, #9
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <hagl_put_char+0x6e>
        return 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e0c0      	b.n	8004d94 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8004c12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c16:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c20:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8004c24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c28:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c32:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8004c36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8004c40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c44:	3a08      	subs	r2, #8
 8004c46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c4a:	3b18      	subs	r3, #24
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fe9f 	bl	8004992 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8004c54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c58:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8004c5c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004c60:	f102 020c 	add.w	r2, r2, #12
 8004c64:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8004c66:	2300      	movs	r3, #0
 8004c68:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004c6c:	f102 020b 	add.w	r2, r2, #11
 8004c70:	7013      	strb	r3, [r2, #0]
 8004c72:	e071      	b.n	8004d58 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8004c74:	2300      	movs	r3, #0
 8004c76:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004c7a:	f102 020a 	add.w	r2, r2, #10
 8004c7e:	7013      	strb	r3, [r2, #0]
 8004c80:	e047      	b.n	8004d12 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8004c82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c86:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b25a      	sxtb	r2, r3
 8004c8e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004c92:	f103 030a 	add.w	r3, r3, #10
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	2180      	movs	r1, #128	; 0x80
 8004c9e:	fa41 f303 	asr.w	r3, r1, r3
 8004ca2:	b25b      	sxtb	r3, r3
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b25b      	sxtb	r3, r3
 8004ca8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004cac:	f102 0208 	add.w	r2, r2, #8
 8004cb0:	7013      	strb	r3, [r2, #0]
            if (set) {
 8004cb2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004cb6:	f103 0308 	add.w	r3, r3, #8
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d010      	beq.n	8004ce2 <hagl_put_char+0x13e>
                *(ptr++) = color;
 8004cc0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004cc4:	f103 030c 	add.w	r3, r3, #12
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	1c9a      	adds	r2, r3, #2
 8004ccc:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8004cd0:	f101 010c 	add.w	r1, r1, #12
 8004cd4:	600a      	str	r2, [r1, #0]
 8004cd6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004cda:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	e00c      	b.n	8004cfc <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8004ce2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004ce6:	f103 030c 	add.w	r3, r3, #12
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	1c9a      	adds	r2, r3, #2
 8004cee:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8004cf2:	f101 010c 	add.w	r1, r1, #12
 8004cf6:	600a      	str	r2, [r1, #0]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8004cfc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004d00:	f103 030a 	add.w	r3, r3, #10
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	3301      	adds	r3, #1
 8004d08:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004d0c:	f102 020a 	add.w	r2, r2, #10
 8004d10:	7013      	strb	r3, [r2, #0]
 8004d12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d16:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004d1a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004d1e:	f102 020a 	add.w	r2, r2, #10
 8004d22:	7812      	ldrb	r2, [r2, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d3ac      	bcc.n	8004c82 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8004d28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d2c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004d30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d34:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d3e:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8004d42:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004d46:	f103 030b 	add.w	r3, r3, #11
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004d52:	f102 020b 	add.w	r2, r2, #11
 8004d56:	7013      	strb	r3, [r2, #0]
 8004d58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d5c:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8004d60:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004d64:	f102 020b 	add.w	r2, r2, #11
 8004d68:	7812      	ldrb	r2, [r2, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d382      	bcc.n	8004c74 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8004d6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d72:	3b18      	subs	r3, #24
 8004d74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d78:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8004d7c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d80:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8004d84:	461a      	mov	r2, r3
 8004d86:	f000 f85a 	bl	8004e3e <hagl_blit>

    return bitmap.width;
 8004d8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d8e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004d92:	b2db      	uxtb	r3, r3
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd90      	pop	{r4, r7, pc}

08004da0 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	; 0x30
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	4608      	mov	r0, r1
 8004daa:	4611      	mov	r1, r2
 8004dac:	461a      	mov	r2, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	817b      	strh	r3, [r7, #10]
 8004db2:	460b      	mov	r3, r1
 8004db4:	813b      	strh	r3, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8004dba:	897b      	ldrh	r3, [r7, #10]
 8004dbc:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8004dbe:	f107 0314 	add.w	r3, r7, #20
 8004dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fe08 	bl	80049da <fontx_meta>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8004dd0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <hagl_put_text+0x3c>
        return 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e02c      	b.n	8004e36 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	60fa      	str	r2, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2b0d      	cmp	r3, #13
 8004dea:	d002      	beq.n	8004df2 <hagl_put_text+0x52>
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	2b0a      	cmp	r3, #10
 8004df0:	d108      	bne.n	8004e04 <hagl_put_text+0x64>
            x0 = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8004df6:	7fbb      	ldrb	r3, [r7, #30]
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	893b      	ldrh	r3, [r7, #8]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	813b      	strh	r3, [r7, #8]
 8004e02:	e010      	b.n	8004e26 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8004e04:	88f8      	ldrh	r0, [r7, #6]
 8004e06:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004e0a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	4603      	mov	r3, r0
 8004e14:	6a38      	ldr	r0, [r7, #32]
 8004e16:	f7ff fec5 	bl	8004ba4 <hagl_put_char>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	897b      	ldrh	r3, [r7, #10]
 8004e20:	4413      	add	r3, r2
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1d6      	bne.n	8004ddc <hagl_put_text+0x3c>

    return x0 - original;
 8004e2e:	897a      	ldrh	r2, [r7, #10]
 8004e30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	b29b      	uxth	r3, r3
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3728      	adds	r7, #40	; 0x28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b086      	sub	sp, #24
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	4603      	mov	r3, r0
 8004e46:	603a      	str	r2, [r7, #0]
 8004e48:	80fb      	strh	r3, [r7, #6]
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8004e54:	2300      	movs	r3, #0
 8004e56:	827b      	strh	r3, [r7, #18]
 8004e58:	e020      	b.n	8004e9c <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	823b      	strh	r3, [r7, #16]
 8004e5e:	e015      	b.n	8004e8c <hagl_blit+0x4e>
            color = *(ptr++);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	1c9a      	adds	r2, r3, #2
 8004e64:	617a      	str	r2, [r7, #20]
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	8a3b      	ldrh	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	b218      	sxth	r0, r3
 8004e74:	88ba      	ldrh	r2, [r7, #4]
 8004e76:	8a7b      	ldrh	r3, [r7, #18]
 8004e78:	4413      	add	r3, r2
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	b21b      	sxth	r3, r3
 8004e7e:	89fa      	ldrh	r2, [r7, #14]
 8004e80:	4619      	mov	r1, r3
 8004e82:	f7ff fe5d 	bl	8004b40 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8004e86:	8a3b      	ldrh	r3, [r7, #16]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	823b      	strh	r3, [r7, #16]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	8a3a      	ldrh	r2, [r7, #16]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d3e4      	bcc.n	8004e60 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8004e96:	8a7b      	ldrh	r3, [r7, #18]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	827b      	strh	r3, [r7, #18]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	885b      	ldrh	r3, [r3, #2]
 8004ea0:	8a7a      	ldrh	r2, [r7, #18]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d3d9      	bcc.n	8004e5a <hagl_blit+0x1c>
        }
    }
#endif
};
 8004ea6:	bf00      	nop
 8004ea8:	bf00      	nop
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <memset>:
 8004eb0:	4402      	add	r2, r0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d100      	bne.n	8004eba <memset+0xa>
 8004eb8:	4770      	bx	lr
 8004eba:	f803 1b01 	strb.w	r1, [r3], #1
 8004ebe:	e7f9      	b.n	8004eb4 <memset+0x4>

08004ec0 <__libc_init_array>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	4d0d      	ldr	r5, [pc, #52]	; (8004ef8 <__libc_init_array+0x38>)
 8004ec4:	4c0d      	ldr	r4, [pc, #52]	; (8004efc <__libc_init_array+0x3c>)
 8004ec6:	1b64      	subs	r4, r4, r5
 8004ec8:	10a4      	asrs	r4, r4, #2
 8004eca:	2600      	movs	r6, #0
 8004ecc:	42a6      	cmp	r6, r4
 8004ece:	d109      	bne.n	8004ee4 <__libc_init_array+0x24>
 8004ed0:	4d0b      	ldr	r5, [pc, #44]	; (8004f00 <__libc_init_array+0x40>)
 8004ed2:	4c0c      	ldr	r4, [pc, #48]	; (8004f04 <__libc_init_array+0x44>)
 8004ed4:	f000 f826 	bl	8004f24 <_init>
 8004ed8:	1b64      	subs	r4, r4, r5
 8004eda:	10a4      	asrs	r4, r4, #2
 8004edc:	2600      	movs	r6, #0
 8004ede:	42a6      	cmp	r6, r4
 8004ee0:	d105      	bne.n	8004eee <__libc_init_array+0x2e>
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
 8004ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee8:	4798      	blx	r3
 8004eea:	3601      	adds	r6, #1
 8004eec:	e7ee      	b.n	8004ecc <__libc_init_array+0xc>
 8004eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef2:	4798      	blx	r3
 8004ef4:	3601      	adds	r6, #1
 8004ef6:	e7f2      	b.n	8004ede <__libc_init_array+0x1e>
 8004ef8:	08008010 	.word	0x08008010
 8004efc:	08008010 	.word	0x08008010
 8004f00:	08008010 	.word	0x08008010
 8004f04:	08008014 	.word	0x08008014

08004f08 <memcpy>:
 8004f08:	440a      	add	r2, r1
 8004f0a:	4291      	cmp	r1, r2
 8004f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f10:	d100      	bne.n	8004f14 <memcpy+0xc>
 8004f12:	4770      	bx	lr
 8004f14:	b510      	push	{r4, lr}
 8004f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f1e:	4291      	cmp	r1, r2
 8004f20:	d1f9      	bne.n	8004f16 <memcpy+0xe>
 8004f22:	bd10      	pop	{r4, pc}

08004f24 <_init>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr

08004f30 <_fini>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr
